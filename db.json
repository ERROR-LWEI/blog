{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/gallery/WechatIMG1.jpeg","path":"gallery/WechatIMG1.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/deer.jpg","path":"gallery/deer.jpg","modified":0,"renderable":0},{"_id":"source/gallery/event-sys.jpeg","path":"gallery/event-sys.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/morphology.jpeg","path":"gallery/morphology.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/pross.jpeg","path":"gallery/pross.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/react.jpeg","path":"gallery/react.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/treefun.jpeg","path":"gallery/treefun.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/treeu.jpeg","path":"gallery/treeu.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/vdom.jpeg","path":"gallery/vdom.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/addle1.jpeg","path":"gallery/addle1.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/htmldocparser.jpeg","path":"gallery/htmldocparser.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/node-tree.jpeg","path":"gallery/node-tree.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/ma.jpeg","path":"gallery/ma.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/string.jpeg","path":"gallery/string.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/treebuild.jpeg","path":"gallery/treebuild.jpeg","modified":0,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/WechatIMG1.jpeg","path":"images/WechatIMG1.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/images/WechatIMG2.jpeg","path":"images/WechatIMG2.jpeg","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"source/gallery/react-redux.jpeg","path":"gallery/react-redux.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/webkit.jpeg","path":"gallery/webkit.jpeg","modified":0,"renderable":0},{"_id":"source/gallery/event.jpeg","path":"gallery/event.jpeg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"b8ce11a07952c0fe076a50f889aa447c834eabf9","modified":1561201837906},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1557547364805},{"_id":"themes/icarus/_config.yml","hash":"9acd7f80a4edd2c96421fe2f34756d92cc49bf3b","modified":1557937621873},{"_id":"themes/icarus/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1557557720057},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1557547364805},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1557547364805},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1557547364824},{"_id":"source/_posts/a跳转操作.md","hash":"06296f50cd3870a9749e38d0d0a6138c3d8e2522","modified":1558617717683},{"_id":"source/_posts/typecript中的reflectApi元编程.md","hash":"7995ec364246314b3c63e82df0b9ab9b0327faad","modified":1559149146262},{"_id":"source/about/index.md","hash":"4d28ce53f65736db8cc90eb8b8cf1ff6c3a6dad8","modified":1557554989755},{"_id":"source/_posts/vueconf.md","hash":"0f3c0a63479f45bf23ef8d4def4d5d80c8b2fc2a","modified":1561381360277},{"_id":"source/gallery/.DS_Store","hash":"9c9d48bb45e3e526ac8850f9ec41b23167255833","modified":1561200910802},{"_id":"source/gallery/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1557548536040},{"_id":"source/gallery/deer.jpg","hash":"aeeb445722949281bda6df0b622dfd433e0ec41d","modified":1557556931950},{"_id":"source/gallery/event-sys.jpeg","hash":"113552199bfaa0022b3d77d1d42877e4e61e8964","modified":1560086152761},{"_id":"source/gallery/morphology.jpeg","hash":"df6cb33da9288218cadc427e05177f44401581ae","modified":1560179689356},{"_id":"source/gallery/pross.jpeg","hash":"e6ba7d823d8eaebad886a31a725e9823620c9e4f","modified":1560266309504},{"_id":"source/gallery/react.jpeg","hash":"78a32bbeb1e88f2be5d326743cdfe1a4bec54674","modified":1561200870156},{"_id":"source/gallery/treefun.jpeg","hash":"aa2ea10574ddd5e8fb79962b3e8fd43ebb58770f","modified":1560265354178},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1557547364805},{"_id":"source/gallery/treeu.jpeg","hash":"9090d1930c9d4a3c3920a111d6314aac37f85787","modified":1560350877625},{"_id":"source/gallery/vdom.jpeg","hash":"d03b801e71d824a68c93eb68898a9067c30ab539","modified":1560074563456},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1557547364810},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1557547364810},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1557547364811},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1557547364810},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1557547364811},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1557547364811},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1557547364811},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1557547364811},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1557547364811},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1557547364812},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1557547364812},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1557547364812},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1557547364812},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1557547364813},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1557547364813},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1557547364816},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1557547364817},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1557547364817},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1557547364820},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1557547364822},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1557547364822},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1557547364824},{"_id":"themes/icarus/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1557548576080},{"_id":"source/gallery/addle1.jpeg","hash":"e334bb6cc462e92b7e4033c3168831f45c574310","modified":1560097084000},{"_id":"source/gallery/htmldocparser.jpeg","hash":"51321d305562e4f46161ddc0892ab8a9da1a9676","modified":1560173388659},{"_id":"source/gallery/node-tree.jpeg","hash":"5723977da2d6b999626ebdfb8d2d29c41a11c36b","modified":1560085592754},{"_id":"source/gallery/ma.jpeg","hash":"88a1bce8a2dc1b3831f36d24ec0d116901af2169","modified":1560178657026},{"_id":"source/gallery/string.jpeg","hash":"b88596497a5be3dfa8d47e12583bab3fccfb4642","modified":1560178895400},{"_id":"source/gallery/treebuild.jpeg","hash":"db8e38d34625184553df3485a68f8e3b78bc75ca","modified":1560173190389},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1557547364806},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1557547364806},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1557547364806},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1557547364806},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1557547364806},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1557547364807},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1557547364807},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/page.js","hash":"50dab1e4ecef55cd090625f91c5456b801e307f2","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1557547364808},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1557547364808},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"4b84b08214cc21feaa4322357f0bec800bfca826","modified":1557547364808},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1557547364808},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1557547364808},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1557547364808},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1557547364808},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1557547364808},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1557547364809},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1557547364809},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1557547364809},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1557547364809},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1557547364809},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1557547364809},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1557547364809},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1557547364810},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1557547364810},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1557547364810},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1557547364813},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1557547364813},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1557547364813},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1557547364813},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1557547364814},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1557547364814},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1557547364814},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1557547364814},{"_id":"themes/icarus/layout/common/head.ejs","hash":"12506ec5e7970eafdfde92c8d2ea44a40f1ba141","modified":1557547364815},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1557547364815},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1557554882360},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"0730e201e6d2a0d20dd1c8d9975c040f644e82ea","modified":1557558384097},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1557547364815},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"403e9c8b5e981c4f4282fc31567f5220a34d5fd9","modified":1557547776934},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1557547364816},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1557547364816},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1557547364816},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1557547364816},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1557547364816},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1557547364817},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1557547364817},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1557547364819},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1557547364820},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1557547364820},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1557547364820},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1557547364821},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1557547364821},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1557547364821},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1557547364821},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1557547364821},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1557547364822},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1557547364822},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1557547364822},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"af05fb29b2b4e221bc50f61c1a85bb1f8c6cab89","modified":1557547364823},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1557547364823},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1557547364823},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1557547364823},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1557547364823},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1557547364824},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1557547364824},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1557547364824},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1557547364824},{"_id":"themes/icarus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557548614741},{"_id":"themes/icarus/source/css/style.styl","hash":"8df581f6d748c7268b93c9f35549e757cd999bbd","modified":1557569566894},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1557547364825},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1557547364825},{"_id":"themes/icarus/source/images/logo.svg","hash":"8d01b4dabbe934d3b632ac4343b157b99d444e54","modified":1557557826845},{"_id":"themes/icarus/source/images/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1557548536040},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1557547364826},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1557547364826},{"_id":"themes/icarus/source/images/WechatIMG2.jpeg","hash":"204db404043ab1c08e4fdf4d02dd1b46b3899f2b","modified":1557548541760},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1557547364827},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1557547364827},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1557547364827},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1557547364827},{"_id":"themes/icarus/source/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1557547364828},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1557547364827},{"_id":"source/gallery/react-redux.jpeg","hash":"bd1b9d7b9613eb1c52394b2727dac57f2329e8f3","modified":1558106908072},{"_id":"source/gallery/webkit.jpeg","hash":"dc4efffbb64946fcadb5bd2068ff1ace848c4d66","modified":1560175320803},{"_id":"source/gallery/event.jpeg","hash":"bc782f2fdf382e38ee7bc88f4e85a74c847e7743","modified":1560268646872},{"_id":"public/content.json","hash":"1c83f41665e95837a46da8d19b05f187b8314a36","modified":1561381368675},{"_id":"public/about/index.html","hash":"d4ad27b4a87d6b3bf0f467822f9e0d06ac84d497","modified":1561381285264},{"_id":"public/2019/06/09/vueconf/index.html","hash":"70f80fa29487a549db7b9091d7df6d330a5171ff","modified":1561381369929},{"_id":"public/2019/05/30/typecript中的reflectApi元编程/index.html","hash":"5aa7f5dff72c8dc7e983ad37db4f0e42a8dbb9e7","modified":1561381285264},{"_id":"public/2019/05/23/a跳转操作/index.html","hash":"0a303614ea5efc76334828cf1b5fc6d9e102149e","modified":1561381285264},{"_id":"public/tags/HTML/index.html","hash":"9cb4aad479a7fff15d18213d1b325ccd5316ae1b","modified":1561381285264},{"_id":"public/tags/reflect/index.html","hash":"abe48eb5889ed3a033b2a2c78c9c1df394fda5cc","modified":1561381285265},{"_id":"public/tags/vueconf/index.html","hash":"59b20e4378c3f46692e7808dd9ad37e1fa3f9af4","modified":1561381369930},{"_id":"public/categories/HTML/index.html","hash":"c20eddbf12cb658891b17dd35a04c0b4e20101fa","modified":1561381285265},{"_id":"public/categories/typescript/index.html","hash":"54aaac3fadec7b73bf9b472a44177bf8fe1faef4","modified":1561381285265},{"_id":"public/categories/笔记/index.html","hash":"fe88e2ebd2a5b0977fffe0c692ef6070b491e46b","modified":1561381369929},{"_id":"public/index.html","hash":"47bd262105619a8b5ee12093d3d62d8fb7882d28","modified":1561381369930},{"_id":"public/archives/index.html","hash":"bcff23dad052859538f282c7f2ce714718a19dec","modified":1561381285265},{"_id":"public/archives/2019/index.html","hash":"9536ea9754ea4ef7dfe0d40b12341573430a9911","modified":1561381285266},{"_id":"public/archives/2019/05/index.html","hash":"d84c27076210ae002803da19a5af5e2a4068d7e0","modified":1561381285266},{"_id":"public/archives/2019/06/index.html","hash":"b59592c236e2652e720c9e018557c2d5d0e2326c","modified":1561381285266},{"_id":"public/categories/index.html","hash":"6d848ce9272b74de955fe53a7f08e5a95063ad7d","modified":1561381285266},{"_id":"public/tags/index.html","hash":"eea95683837588d0a5cb651f8bc8ff884c60ef45","modified":1561381285266},{"_id":"public/gallery/event-sys.jpeg","hash":"113552199bfaa0022b3d77d1d42877e4e61e8964","modified":1561381285272},{"_id":"public/gallery/pross.jpeg","hash":"e6ba7d823d8eaebad886a31a725e9823620c9e4f","modified":1561381285272},{"_id":"public/gallery/treefun.jpeg","hash":"aa2ea10574ddd5e8fb79962b3e8fd43ebb58770f","modified":1561381285272},{"_id":"public/gallery/react.jpeg","hash":"78a32bbeb1e88f2be5d326743cdfe1a4bec54674","modified":1561381285272},{"_id":"public/gallery/morphology.jpeg","hash":"df6cb33da9288218cadc427e05177f44401581ae","modified":1561381285273},{"_id":"public/gallery/treeu.jpeg","hash":"9090d1930c9d4a3c3920a111d6314aac37f85787","modified":1561381285273},{"_id":"public/gallery/vdom.jpeg","hash":"d03b801e71d824a68c93eb68898a9067c30ab539","modified":1561381285273},{"_id":"public/images/logo.svg","hash":"8d01b4dabbe934d3b632ac4343b157b99d444e54","modified":1561381285273},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1561381285273},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1561381285273},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1561381285273},{"_id":"public/images/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1561381285274},{"_id":"public/images/WechatIMG2.jpeg","hash":"204db404043ab1c08e4fdf4d02dd1b46b3899f2b","modified":1561381285274},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1561381285274},{"_id":"public/gallery/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1561381285280},{"_id":"public/gallery/deer.jpg","hash":"aeeb445722949281bda6df0b622dfd433e0ec41d","modified":1561381285280},{"_id":"public/gallery/addle1.jpeg","hash":"e334bb6cc462e92b7e4033c3168831f45c574310","modified":1561381285281},{"_id":"public/gallery/htmldocparser.jpeg","hash":"51321d305562e4f46161ddc0892ab8a9da1a9676","modified":1561381285281},{"_id":"public/gallery/node-tree.jpeg","hash":"5723977da2d6b999626ebdfb8d2d29c41a11c36b","modified":1561381285281},{"_id":"public/gallery/ma.jpeg","hash":"88a1bce8a2dc1b3831f36d24ec0d116901af2169","modified":1561381285282},{"_id":"public/gallery/string.jpeg","hash":"b88596497a5be3dfa8d47e12583bab3fccfb4642","modified":1561381285282},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1561381285551},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1561381285552},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1561381285552},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1561381285552},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1561381285552},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1561381285552},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1561381285552},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1561381285553},{"_id":"public/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1561381285553},{"_id":"public/gallery/treebuild.jpeg","hash":"db8e38d34625184553df3485a68f8e3b78bc75ca","modified":1561381285553},{"_id":"public/css/style.css","hash":"6fd3065ac6a615be7809704b145bad6106847ff5","modified":1561381285557},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1561381285557},{"_id":"public/gallery/webkit.jpeg","hash":"dc4efffbb64946fcadb5bd2068ff1ace848c4d66","modified":1561381285557},{"_id":"public/gallery/react-redux.jpeg","hash":"bd1b9d7b9613eb1c52394b2727dac57f2329e8f3","modified":1561381285561},{"_id":"public/gallery/event.jpeg","hash":"bc782f2fdf382e38ee7bc88f4e85a74c847e7743","modified":1561381285605}],"Category":[{"name":"HTML","_id":"cjxadu7x900035u5fai2zntpm"},{"name":"typescript","_id":"cjxadu7xe00055u5fh6rwbrwb"},{"name":"笔记","_id":"cjxadu7yb000c5u5fk450qh4h"}],"Data":[],"Page":[{"title":"about","donate":false,"date":"2019-05-11T05:58:21.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndonate: false\ndate: 2019-05-11 13:58:21\n---\n","updated":"2019-05-11T06:09:49.755Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjxadu7x400015u5fit2te5ls","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"a跳转操作","date":"2019-05-23T11:54:28.000Z","_content":"## 超链接标签\nhtml中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。\n\n#### 跳转连接\n利用a标签进行路由跳转\n```\n<a href=\"www.zhihu.com\" title=\"知乎\">知乎</a>\n```\n#### 开启tab\n利用a标签跳转页面打开新页面\n```\n<a href=\"www.zhihu.com\" title=\"知乎\" target=\"_target\">知乎</a>\n```\n\n#### 锚点\n利用a标签跳转到页面的其他地方\n```\n<a href=\"#\">返回页面顶部</a>\n```\n\n#### 下载连接\n进行资源下载\n```\n<a href=\"*****\" download>文档</a>\n```\n\n#### 调起外部服务\n```\n### 移动端电话拨打\n<a href=\"tel:+134*******\">联系电话</a>\n### 邮件发送\n<a href=“mailto:error_lwei@163.com”>发送给谁</a>\n### 抄送\n<a href=\"mailto:error_lwei@163.com\" cc=\"lemonpaimc@163.com\">抄送</a>\n```\n","source":"_posts/a跳转操作.md","raw":"---\ntitle: a跳转操作\ndate: 2019-05-23 19:54:28\ntags: HTML\ncategory:\n    - \n        HTML\n---\n## 超链接标签\nhtml中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。\n\n#### 跳转连接\n利用a标签进行路由跳转\n```\n<a href=\"www.zhihu.com\" title=\"知乎\">知乎</a>\n```\n#### 开启tab\n利用a标签跳转页面打开新页面\n```\n<a href=\"www.zhihu.com\" title=\"知乎\" target=\"_target\">知乎</a>\n```\n\n#### 锚点\n利用a标签跳转到页面的其他地方\n```\n<a href=\"#\">返回页面顶部</a>\n```\n\n#### 下载连接\n进行资源下载\n```\n<a href=\"*****\" download>文档</a>\n```\n\n#### 调起外部服务\n```\n### 移动端电话拨打\n<a href=\"tel:+134*******\">联系电话</a>\n### 邮件发送\n<a href=“mailto:error_lwei@163.com”>发送给谁</a>\n### 抄送\n<a href=\"mailto:error_lwei@163.com\" cc=\"lemonpaimc@163.com\">抄送</a>\n```\n","slug":"a跳转操作","published":1,"updated":"2019-05-23T13:21:57.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxadu7ww00005u5f9lqvutvs","content":"<h2 id=\"超链接标签\"><a href=\"#超链接标签\" class=\"headerlink\" title=\"超链接标签\"></a>超链接标签</h2><p>html中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。</p>\n<h4 id=\"跳转连接\"><a href=\"#跳转连接\" class=\"headerlink\" title=\"跳转连接\"></a>跳转连接</h4><p>利用a标签进行路由跳转<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"开启tab\"><a href=\"#开启tab\" class=\"headerlink\" title=\"开启tab\"></a>开启tab</h4><p>利用a标签跳转页面打开新页面<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot; target=&quot;_target&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>利用a标签跳转到页面的其他地方<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#&quot;&gt;返回页面顶部&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载连接\"><a href=\"#下载连接\" class=\"headerlink\" title=\"下载连接\"></a>下载连接</h4><p>进行资源下载<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;*****&quot; download&gt;文档&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"调起外部服务\"><a href=\"#调起外部服务\" class=\"headerlink\" title=\"调起外部服务\"></a>调起外部服务</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动端电话拨打</span><br><span class=\"line\">&lt;a href=&quot;tel:+134*******&quot;&gt;联系电话&lt;/a&gt;</span><br><span class=\"line\">### 邮件发送</span><br><span class=\"line\">&lt;a href=“mailto:error_lwei@163.com”&gt;发送给谁&lt;/a&gt;</span><br><span class=\"line\">### 抄送</span><br><span class=\"line\">&lt;a href=&quot;mailto:error_lwei@163.com&quot; cc=&quot;lemonpaimc@163.com&quot;&gt;抄送&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"超链接标签\"><a href=\"#超链接标签\" class=\"headerlink\" title=\"超链接标签\"></a>超链接标签</h2><p>html中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。</p>\n<h4 id=\"跳转连接\"><a href=\"#跳转连接\" class=\"headerlink\" title=\"跳转连接\"></a>跳转连接</h4><p>利用a标签进行路由跳转<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"开启tab\"><a href=\"#开启tab\" class=\"headerlink\" title=\"开启tab\"></a>开启tab</h4><p>利用a标签跳转页面打开新页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot; target=&quot;_target&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>利用a标签跳转到页面的其他地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#&quot;&gt;返回页面顶部&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载连接\"><a href=\"#下载连接\" class=\"headerlink\" title=\"下载连接\"></a>下载连接</h4><p>进行资源下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;*****&quot; download&gt;文档&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"调起外部服务\"><a href=\"#调起外部服务\" class=\"headerlink\" title=\"调起外部服务\"></a>调起外部服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动端电话拨打</span><br><span class=\"line\">&lt;a href=&quot;tel:+134*******&quot;&gt;联系电话&lt;/a&gt;</span><br><span class=\"line\">### 邮件发送</span><br><span class=\"line\">&lt;a href=“mailto:error_lwei@163.com”&gt;发送给谁&lt;/a&gt;</span><br><span class=\"line\">### 抄送</span><br><span class=\"line\">&lt;a href=&quot;mailto:error_lwei@163.com&quot; cc=&quot;lemonpaimc@163.com&quot;&gt;抄送&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"typecript中的reflectApi元编程","date":"2019-05-30T13:33:00.000Z","_content":"### 元编程\n>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。\n\n这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。\n\n```\nimport 'reflect-metadata';\n\n@Module({\n    import: [],\n    controller: [],\n    exports: [],\n})\nclass Test {\n    constructor(props) {}\n    @Reflect.metadata('hello', 'word')\n    getService() {}\n}\n```\n利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。\n#### nestjs使用注解对元子进行操作的特点\n##### 类型注解\n@Module\n这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。\n```\n例：\n/user/info/add\n/user/msg/detail\n这样一个资源路径转换成module\n        user\n    info    msg\nadd             detail\n应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。\n```\n每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。\n```\nimport起到连接module的作用建立上下级关系同时具备service的传导操作\n    import\nuser  =>  info\nuser  =>  msg\n    service\nuser  <=  info\nuser  <=  msg\n这类似与在父进程中兄弟线程的共享内存\n```\n##### 依赖注入\n直观点按nest的操作来看就是\n```\n@module({\n    import: [],\n    controller: [UserController],\n    provider: [UserService]\n})\nclass User {}\n\n// 内部其实大概是这样的\nnew UserController(new UserService)\n\nclass UserService {\n    constructor(userservice: UserService) {}\n}\n\n// 注入的过程在工厂函数构建应用时完成的\n```\n##### 操作\n应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程\n```\ndb <= service <= controller\n```\n\n#### 模型转到前端\n把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。\n##### redux应用的中心\nredux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。\n```\n对应关系\ndb <= service <= controller\nstore <= action <= view\n```\n\n##### store\n```\n@Store('user')\nclass User {\n    constructor() {}\n\n    @type('ADD_USER')\n    function add(state, action) {\n        ......\n    }\n\n    @type('UPDATA_USER')\n    function updata(state, action) {\n        ......\n    }\n}\n```\n##### action\n```\n@Action()\nclass UserAction {\n    constructor(user: User) {}\n    \n    @post('/api/user', 'json')\n    function add(params) {\n        return {\n            type: user.ADD_USER\n            params: {\n                ...params\n            }\n        }\n    }\n}\n```\n##### view\n```\n@View\nclass User extends React.Component {\n    constructor() {}\n}\n\nfunction View(state, action) {\n    return function(Target) {\n        return connect(state, action)(Target)\n    }\n}\n```\n#### import\nnest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。\n\n最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。","source":"_posts/typecript中的reflectApi元编程.md","raw":"---\ntitle: typecript中的reflectApi元编程\ndate: 2019-05-30 21:33:00\ntags: reflect\ncategory:\n    -\n        typescript\n---\n### 元编程\n>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。\n\n这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。\n\n```\nimport 'reflect-metadata';\n\n@Module({\n    import: [],\n    controller: [],\n    exports: [],\n})\nclass Test {\n    constructor(props) {}\n    @Reflect.metadata('hello', 'word')\n    getService() {}\n}\n```\n利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。\n#### nestjs使用注解对元子进行操作的特点\n##### 类型注解\n@Module\n这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。\n```\n例：\n/user/info/add\n/user/msg/detail\n这样一个资源路径转换成module\n        user\n    info    msg\nadd             detail\n应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。\n```\n每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。\n```\nimport起到连接module的作用建立上下级关系同时具备service的传导操作\n    import\nuser  =>  info\nuser  =>  msg\n    service\nuser  <=  info\nuser  <=  msg\n这类似与在父进程中兄弟线程的共享内存\n```\n##### 依赖注入\n直观点按nest的操作来看就是\n```\n@module({\n    import: [],\n    controller: [UserController],\n    provider: [UserService]\n})\nclass User {}\n\n// 内部其实大概是这样的\nnew UserController(new UserService)\n\nclass UserService {\n    constructor(userservice: UserService) {}\n}\n\n// 注入的过程在工厂函数构建应用时完成的\n```\n##### 操作\n应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程\n```\ndb <= service <= controller\n```\n\n#### 模型转到前端\n把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。\n##### redux应用的中心\nredux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。\n```\n对应关系\ndb <= service <= controller\nstore <= action <= view\n```\n\n##### store\n```\n@Store('user')\nclass User {\n    constructor() {}\n\n    @type('ADD_USER')\n    function add(state, action) {\n        ......\n    }\n\n    @type('UPDATA_USER')\n    function updata(state, action) {\n        ......\n    }\n}\n```\n##### action\n```\n@Action()\nclass UserAction {\n    constructor(user: User) {}\n    \n    @post('/api/user', 'json')\n    function add(params) {\n        return {\n            type: user.ADD_USER\n            params: {\n                ...params\n            }\n        }\n    }\n}\n```\n##### view\n```\n@View\nclass User extends React.Component {\n    constructor() {}\n}\n\nfunction View(state, action) {\n    return function(Target) {\n        return connect(state, action)(Target)\n    }\n}\n```\n#### import\nnest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。\n\n最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。","slug":"typecript中的reflectApi元编程","published":1,"updated":"2019-05-29T16:59:06.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjxadu7x600025u5foo1mcrch","content":"<h3 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h3><blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。</p>\n</blockquote>\n<p>这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;reflect-metadata&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [],</span><br><span class=\"line\">    exports: [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    constructor(props) &#123;&#125;</span><br><span class=\"line\">    @Reflect.metadata(&apos;hello&apos;, &apos;word&apos;)</span><br><span class=\"line\">    getService() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。</p>\n<h4 id=\"nestjs使用注解对元子进行操作的特点\"><a href=\"#nestjs使用注解对元子进行操作的特点\" class=\"headerlink\" title=\"nestjs使用注解对元子进行操作的特点\"></a>nestjs使用注解对元子进行操作的特点</h4><h5 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h5><p>@Module<br>这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">/user/info/add</span><br><span class=\"line\">/user/msg/detail</span><br><span class=\"line\">这样一个资源路径转换成module</span><br><span class=\"line\">        user</span><br><span class=\"line\">    info    msg</span><br><span class=\"line\">add             detail</span><br><span class=\"line\">应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。</span><br></pre></td></tr></table></figure></p>\n<p>每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import起到连接module的作用建立上下级关系同时具备service的传导操作</span><br><span class=\"line\">    import</span><br><span class=\"line\">user  =&gt;  info</span><br><span class=\"line\">user  =&gt;  msg</span><br><span class=\"line\">    service</span><br><span class=\"line\">user  &lt;=  info</span><br><span class=\"line\">user  &lt;=  msg</span><br><span class=\"line\">这类似与在父进程中兄弟线程的共享内存</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h5><p>直观点按nest的操作来看就是<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [UserController],</span><br><span class=\"line\">    provider: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部其实大概是这样的</span><br><span class=\"line\">new UserController(new UserService)</span><br><span class=\"line\"></span><br><span class=\"line\">class UserService &#123;</span><br><span class=\"line\">    constructor(userservice: UserService) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注入的过程在工厂函数构建应用时完成的</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &lt;= service &lt;= controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模型转到前端\"><a href=\"#模型转到前端\" class=\"headerlink\" title=\"模型转到前端\"></a>模型转到前端</h4><p>把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。</p>\n<h5 id=\"redux应用的中心\"><a href=\"#redux应用的中心\" class=\"headerlink\" title=\"redux应用的中心\"></a>redux应用的中心</h5><p>redux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应关系</span><br><span class=\"line\">db &lt;= service &lt;= controller</span><br><span class=\"line\">store &lt;= action &lt;= view</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Store(&apos;user&apos;)</span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;ADD_USER&apos;)</span><br><span class=\"line\">    function add(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;UPDATA_USER&apos;)</span><br><span class=\"line\">    function updata(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Action()</span><br><span class=\"line\">class UserAction &#123;</span><br><span class=\"line\">    constructor(user: User) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @post(&apos;/api/user&apos;, &apos;json&apos;)</span><br><span class=\"line\">    function add(params) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: user.ADD_USER</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                ...params</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@View</span><br><span class=\"line\">class User extends React.Component &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function View(state, action) &#123;</span><br><span class=\"line\">    return function(Target) &#123;</span><br><span class=\"line\">        return connect(state, action)(Target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><p>nest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。</p>\n<p>最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h3><blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。</p>\n</blockquote>\n<p>这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;reflect-metadata&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [],</span><br><span class=\"line\">    exports: [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    constructor(props) &#123;&#125;</span><br><span class=\"line\">    @Reflect.metadata(&apos;hello&apos;, &apos;word&apos;)</span><br><span class=\"line\">    getService() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。</p>\n<h4 id=\"nestjs使用注解对元子进行操作的特点\"><a href=\"#nestjs使用注解对元子进行操作的特点\" class=\"headerlink\" title=\"nestjs使用注解对元子进行操作的特点\"></a>nestjs使用注解对元子进行操作的特点</h4><h5 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h5><p>@Module<br>这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">/user/info/add</span><br><span class=\"line\">/user/msg/detail</span><br><span class=\"line\">这样一个资源路径转换成module</span><br><span class=\"line\">        user</span><br><span class=\"line\">    info    msg</span><br><span class=\"line\">add             detail</span><br><span class=\"line\">应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。</span><br></pre></td></tr></table></figure></p>\n<p>每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import起到连接module的作用建立上下级关系同时具备service的传导操作</span><br><span class=\"line\">    import</span><br><span class=\"line\">user  =&gt;  info</span><br><span class=\"line\">user  =&gt;  msg</span><br><span class=\"line\">    service</span><br><span class=\"line\">user  &lt;=  info</span><br><span class=\"line\">user  &lt;=  msg</span><br><span class=\"line\">这类似与在父进程中兄弟线程的共享内存</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h5><p>直观点按nest的操作来看就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [UserController],</span><br><span class=\"line\">    provider: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部其实大概是这样的</span><br><span class=\"line\">new UserController(new UserService)</span><br><span class=\"line\"></span><br><span class=\"line\">class UserService &#123;</span><br><span class=\"line\">    constructor(userservice: UserService) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注入的过程在工厂函数构建应用时完成的</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &lt;= service &lt;= controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模型转到前端\"><a href=\"#模型转到前端\" class=\"headerlink\" title=\"模型转到前端\"></a>模型转到前端</h4><p>把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。</p>\n<h5 id=\"redux应用的中心\"><a href=\"#redux应用的中心\" class=\"headerlink\" title=\"redux应用的中心\"></a>redux应用的中心</h5><p>redux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应关系</span><br><span class=\"line\">db &lt;= service &lt;= controller</span><br><span class=\"line\">store &lt;= action &lt;= view</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Store(&apos;user&apos;)</span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;ADD_USER&apos;)</span><br><span class=\"line\">    function add(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;UPDATA_USER&apos;)</span><br><span class=\"line\">    function updata(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Action()</span><br><span class=\"line\">class UserAction &#123;</span><br><span class=\"line\">    constructor(user: User) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @post(&apos;/api/user&apos;, &apos;json&apos;)</span><br><span class=\"line\">    function add(params) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: user.ADD_USER</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                ...params</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@View</span><br><span class=\"line\">class User extends React.Component &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function View(state, action) &#123;</span><br><span class=\"line\">    return function(Target) &#123;</span><br><span class=\"line\">        return connect(state, action)(Target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><p>nest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。</p>\n<p>最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。</p>\n"},{"title":"vueconf","date":"2019-06-09T10:19:06.000Z","_content":"\n### 前言\n> 基于对之前的一版不太满意的原因的下，今天做了两张图细化一下。同时更想说清楚为什么会出现vdom，以及进行react和vue的跨平台方案的切入点到底在哪里。看多端方案和vdom之前其实还是有必要去看原始web开发的实际生产中怎么做到从html，js到浏览器应用的这个过程，这个对于多端方案的理解是有很大帮助，现有多端方案细化的点不是很清楚，但是在大的架构方面都是相差不大的。\n\n##### web端开发\nweb应用其实可以解释成浏览器的子产品和小程序如出一辙，只是宿主平台不一样。企业或用户的产品都是运行在同一个应用上的，chrome本身就是一个产品你开多少个浏览器访问多少个网站都是在这个宿主上去做事情。看宿主和web应用或者hybrid或者是react-native，大的方式都是一致的，宿主对于用户操作通用行为的封装暴露出接口，同时抽象一套视图系统，同时将视图系统与系统操作能力注入到JScore中。宿主所能提供的就是前进后退，操作响应，网络与文件io，设备调用这些通用的业务功能，至于是付款还是表单输入信息，输入的是什么这些上层操作就不在宿主考虑的范围了，如果掺入了细化的逻辑，在通用性上宿主的功能就越界了变的不纯粹了。web业务或者html与js有热度的原因很大一部分在于，它的移植性十分的强。包括nodejs，应用逻辑和宿主的关系并不是很紧密，业务代码更大一部分放在了js这端。\n\n#### 浏览器的功能结构\n从web前端转换到其他端js前端开发时，其实回头继续看浏览器就可以了，js在其中的位置大致相同。如果只是做js这端的基础开发只需要了解js引擎与宿主的对接关系就能处理了。\n<div align=center><img src=\"../gallery/webkit.jpeg\" width=\"800\" align=center />\n</div>\n<br/>\n<br/>\n这个是qtwebkit的整体结构，web浏览器外部对接一个js引擎，一个操作系统，一个文档系统。脚本系统不与文档系统直接对接，文档系统的作用就只在初始化视图时用到，剩下的我们看到的dom数据是宿主根据文档数据转化成的视图对象然后注入到js引擎中的。\n```\n### html文档用来申明一个node类的类型，以及类型具备的功能参数的，img表示是图片类型，src表示下载的功能参数，title表示浮窗功能。\n### 如果用不支持图片格式的软件打开图片，图片就是下面这种信息。\n0101 1100 0010 ...\n1111 0000 1001 ...\n### 具体它的解析器规则假设0101代表的是rgba中的每一个，而这每四个构成一个像素的表达,它就是一个屏幕图像信息的表示了。\n### 表达方式可以是任何形式，只要有对应的解释器。html的<img src=\"\" />也是一样，有相应的解释器去解释这一段字符串。\n```\n###### HTMLTokenizer\nHTMLTokenizer是内核中的一个c++类，用来做词法分析检验文档词法的合法性。是从字节流到特定格式的字符串。网页头部设置的utf-8就是帮助词法分析器去做字节处理的，当然不输的话也能自己找到匹配的解析方式，内置的nextToken函数会循环去读每读取一段就标记一段的处理状态并输出一个解释的词语。\n```\n### 在界面上看到html文档可能是utf-8,不过在下载完成后是从一种文件系统到另一个系统的对接，文件会被直接转成字节码。\n### HTMLTokenizer 的具体功能就是用来做字节流的解码的。转化成能认识的编码。如果是不支持的编码方式。也就出现了有时候看到的乱码，乱码出现的点就是在HTMLTokenizer这里了。\n```\n命名还是很好理解的，所以写啥注释，命名好了大概就是提示了。\n<br/>\n<div align=center>\n    <img src=\"../gallery/ma.jpeg\" width=\"800\" align=center />\n    <img src=\"../gallery/string.jpeg\" width=\"800\" align=center />\n</div>\n<br/>\n这其中也包含一部分xss攻击的处理，对于包含非法信息的标签进行过滤。在进行视图对接前就将数据处理干净，默默的感觉有点像接口参数校验。\n<br/>\n<br/>\n<div align=center><img src=\"../gallery/morphology.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n##### HTMLDocumentParser\n虽然HTMLDocumentParser与HTMLTokenizer是两个不同的小系统，但他们在整体里面所起到的作用是近似的都是在做前置数据的准备。一个负责检查转译筛选，一个负责将它转变成另一种形式，HTMLDocumentParser所做的工作就是将词语转成节点。这个处理过程是已栈的方式去做的，即遇到< 标记开始入栈 遇到</标记进行出栈。\n```\n## 解析下面一段文本的方式\n<div><p></p></div>\n[div,p]\n[div]\n[]\n先压入div标签，再压入p标签，处理完p之后再处理完div最后div出栈\n<img src=\"...\" /> => { type: 'img', src: '....', .... }\n```\n\bHTMLDocumentParser内部调用的是HTMLTreeBuilder的constructTree方法进行词语到节点的转化，然后看c++的语法是真漂亮虽然多很多代码。其中很多这种std::是它的智能指针功能，内部有引用计数做垃圾回收。经过前两步处理完的数据最后的节点信息就是即将进行渲染的信息，html和js交互处理的实际上是这部分信息，比如在html加载的过程遇到js控制dom更改的过程。GUI和js访问的是同一个资源信息，GUI根据节点信息渲染dom，当js申请操作修改时节点信息就被锁住，GUI工作就需要被暂停，当js修改信息完成资源访问就被释放。\n<br/>\n<div align=center><img src=\"../gallery/treebuild.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/treefun.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/pross.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n##### node系统\nnode系统可以说是webkit最核心的功能，它赋予了js中的document下所有dom中的各种能力，比如调用底层注册事件等。不能完全看明白或者理解oop是什么，不过能学习到如何通过oop的方式去进行多系统的对接，可以把node与其他系统的连接看成下面这种形式。\n<br/>\n<div align=center><img src=\"../gallery/node-tree.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n```\nclass Event {\n    constructor() {\n    }\n\n    static queue = [];\n\n    add() {...}\n\n    remove() {...}\n}\n\nclass GuI {\n    constructor() {}\n\n    static render() {\n        sys.Gui()\n    }\n\n    start() {....}\n    stop() {....}\n}\n\nclass Src {\n    constructor() {}\n\n    Io(src) {\n        sys.Io(src);\n    }\n}\n\nclass Node extends Event, GuI {\n    constructor() { super(); }\n\n    ....\n}\n```\n###### react中通过继承做界面的组合\n真的比较懒所以这个图真的有点丑！这个方式是从其他人那里学到的，不过他的方式是不做整体页面的组合，都是做颗粒度比较小的界面部件的类型封装，这种是很灵活的。\n<div align=center><img src=\"../gallery/react.jpeg\" width=\"800\" align=center/>\n</div>\n```\n### js没有多继承搞这种真的是有点不舒服\n### 一层层的拆成小的碎片\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            param: {},\n        }\n        this.initState();\n    }\n\n    initState(param) {\n        return null;\n    }\n\n    /** 获取表单数据 **/\n    getFormData() {\n        ......\n        暴露给外部获取数据\n    }\n\n    /** 过滤表单数据 **/\n    filterFormData() {\n        ......\n        内部功能函数\n    }\n\n    render() {\n        return (\n            <div>{ 视图逻辑 }</div>\n        )\n    }\n}\n\nclass SearchBtn extends Search {\n    constructor(props) {\n        super(props);\n    }\n\n    /** 与外部对接的过程 **/\n    onSubmitReq(param) {\n        return null;\n    }\n\n    /** 内部处理过程 **/\n    onSubmit() {\n        const data = this.getFormData();\n        this.onSubmit(data);\n    }\n\n    render() {\n        return (\n            <div>\n            { super.render() }\n            <div>\n                { 按钮视图 }\n            </div>\n            </div>\n        )\n    }\n}\n\nclass List extends SearchBtn {\n    constructor(props) {\n        super(props);\n    }\n\n    initState() {\n        this.state.list = [];\n    }\n\n    onSubmitReq(params) {\n        api(params);\n    }\n\n    render() {\n        return (\n            <div>\n                { super.render() }\n                <table>\n            </div>\n        )\n    }\n}\n```\n\nnode通过继承将各种能力添加到dom中，拆看来看单个父类的功能是很纯净的。在Event中自己维护和系统事件的对接，当监听到某一事件的触发，就调用注册的监听的控制器传入上层，在底层系统中的事件处理是没有目标的这个概念只有事件类型input类型事件click类型事件。这个处理方式也是对于本系统可控的方式的一点，系统的边界必须明确，比如从a-b的对接，其实我并不知道具体是a里面的谁要求做了这件事,事实是b也不需要知道。如果b连谁做了也要分析的话今天有abc申请了明天有mgn申请了，那这也太头痛了我只需要知道自己能处理的是input操作click操作处理了就丢出去你自己找是谁申请的。所以到前端这边也就存在了捕获和冒泡这种东西。为了保持底层的在移植的过程中的通用性。同时将对接的多个能力拆分到不同的类型中，分散治理将功能隔离开。\n<div align=center><img src=\"../gallery/event.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/event-sys.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/addle1.jpeg\" width=\"800\" align=center/>\n</div>\n```\nfunction add(a, b, c, d) {\n    .......\n    // **从一个应用到另一个应用**\n    sys.add(a,b,c)\n}\n```\n最后再回想conf上崔红保大佬说的不要频繁setData,以及为什么会出现vdom这个东西。由于js去直接操作dom不是在前端这边操作数据而是调用内核暴露出来的能力去修改内核中存储的dom节点信息。在信息不大的情况下其实都还好，大数据量的dom操作情况下相当于频繁的从a-b-c-d而且是从一个系统到另一系统的调用一个线程到另一个线程的通信。这个代价是高的，既然视图都是从数据去转成视图的，那前端先处理好视图数据最后集体调内核能力，vdom就是视图数据在前端的一种体现因为要做时间切片等优化在数据上又扩充了一些其他信息，react的fiber架构中单个节点中出现的time信息就是一个例子。\n#### vdom\nvdom有点像在js这端做的从html到节点转换的工作，当然附加了更多的运行时的数据，包含原有dom比原有dom的信息更丰富。react，vue之前的dom是由html文档提供初始化的视图数据浏览器解析然后返回到js，js属于直接操作dom，因为js本地其实是不存储视图关系（也可以用jq去实现vdom），所以有更改就要直接调用api操作浏览器内部的数据，vdom所解决的就是视图数据在前端的管理以及控制js这端调用浏览器操作的频率。\n\n<div align=center><img src=\"../gallery/vdom.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n<br/>\n```\nupdatequeue = [vdom1, vdom2, vdom3, vdom4];\n// 每个vdom包含扩展信息又包含原始信息，始终能根据原始信息找到对应的原始dom和调用原始dom的api\nvdom = {\n    dom: dom,\n    time: 123,\n    vdomobject: {}, \n}\n当调用set的时候更新并推到队列里，如果一个时间片内的长度是5，那么当有5个更新节点时就一次推动更新。当然描述可能存在误差但是主要是想表明在这里面，先借助vdom做前置处理，最后反应结果到dom上。\n```\n到这里其实多端方案的思路其实也比较清楚了，深入的话就到实际开发中去了。\n##### react时间切片更新方案的大概方式\n由于vdom是对于dom的一种反应，所以在前端js层是一个多叉树的结构去存储视图数据的，每个节点就是一个完整的fiber。前端开发使用vue或者react这套方案去做本质还是对一颗树的节点进行操作。所以，就会涉及到对于树的查找对于树的节点替换更新。多叉树的查找性能随着树的深度而加深，diff方案优化的是在前端对于数据树中的单个更新节点的查找，最后的更新还是整棵树的更新。\n<br/>\n<br/>\n<div align=center><img src=\"../gallery/treeu.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n<br/>\n来看下react的最小更新方案，\breact的fiber方案中。在单个节点也会存在一个updatequeue，如果打印一下父子组件的生命周期会发现它的过程是先子组件触发然后父子组件触发，它的更新方案是节点内的自治自下而上的传导，也就是小范围内的触发更新。vueconf上3.0说依旧保持模版方案，并且会加入动静结合的方式对存在变动的节点加入监听自己的理解应该也是这么个意思。在将模版信息转成对象信息的时候在这个转化的过程中就会插入记录有花括号的或者有for循环，就是揭露有可能存在更改的更改的节点，因为vue是以劫持的方式去监听更新的，如果用代理的方式去处理每个节点都创建一个代理对象，这自然在性能上是很大的开销因为你会为此加入类型推导判断是否存在变化，也就是在运行时不管有没有变化都会做判断逻辑，也就必然存在时间的增加。这和要求我们尽量是用const不用let是一个意思，const声明的是常量不会存在类型变化，v8内核不会在运行时不会为此做类型变化的判断。另外在尤大提到的3.0将去除class和装饰器的支持之前自己是很喜欢用装饰器的也并没有考虑到装饰器带来的不稳定性，这涉及到函数的返回副作用，这个也是监测点。\n```\n#### react的高阶函数\nfunction Component(Target) {\n    return class extends React.Component {\n\n    }\n}\n高阶函数的副作用在于尽管在代码层面看起来他们都是一样的结构，但是函数的返回始终是一个新的对象，他们其实并不相等。代码存在复用，在实际的运行时内存中的数据不存在复用。\njs的函数参数的指针是隐式的，即不管传入的参数是否在函数内有操作，所返回的值都是要在内存中创建一个新的数据与指针，存在空间的损耗。\n```\n真正的更新操作是，js在一定的周期内内部自治完成对节点信息的替换更新，然后调用api将维护完的数据树同步到浏览器中。像上图中的两颗树，当某个范围内的节点触发set时，将js存储的数据树中关于视图部分的信息更新掉。\n```\n{\n    type: 'div',\n    data: {\n        list: [1,2,3],\n    },\n    html: `<div>{ this.list }</div>`\n}\n{\n    data: {\n        list: [3,4,5],\n    },\n    html: `<div>{ this.list }</div>`\n}\n```\n像这样的节点整颗更新掉之后，html的信息其实已经替换成最新的，然后innerhtml=*****。触发浏览器的视图刷新，这样就避免了一次次的调用api，也就变成了时间切片了，在一定时间内我这边自己做好处理再通知你。\n\n##### 现在的多端方案使用vue和react，借用的点是什么？\n其他端和浏览器是一致的，他们唯一借助的点是vue和react关于视图数据的管理和更新。唯一存在魔改的点在视图功能的对接口，即在浏览器端src和title可能对应的是node类中的一中功能，在安卓端这两个属性对应的实现点又是另一种方式。\n```\n<img src=**** title=***/>\n```\n所以慢慢的有一种感觉就是虽然都是react和vue但是其实已经不是之前在web端使用的了。\n","source":"_posts/vueconf.md","raw":"---\ntitle: vueconf\ndate: 2019-06-09 18:19:06\ntags: vueconf\ncategory:\n    -\n        笔记\n---\n\n### 前言\n> 基于对之前的一版不太满意的原因的下，今天做了两张图细化一下。同时更想说清楚为什么会出现vdom，以及进行react和vue的跨平台方案的切入点到底在哪里。看多端方案和vdom之前其实还是有必要去看原始web开发的实际生产中怎么做到从html，js到浏览器应用的这个过程，这个对于多端方案的理解是有很大帮助，现有多端方案细化的点不是很清楚，但是在大的架构方面都是相差不大的。\n\n##### web端开发\nweb应用其实可以解释成浏览器的子产品和小程序如出一辙，只是宿主平台不一样。企业或用户的产品都是运行在同一个应用上的，chrome本身就是一个产品你开多少个浏览器访问多少个网站都是在这个宿主上去做事情。看宿主和web应用或者hybrid或者是react-native，大的方式都是一致的，宿主对于用户操作通用行为的封装暴露出接口，同时抽象一套视图系统，同时将视图系统与系统操作能力注入到JScore中。宿主所能提供的就是前进后退，操作响应，网络与文件io，设备调用这些通用的业务功能，至于是付款还是表单输入信息，输入的是什么这些上层操作就不在宿主考虑的范围了，如果掺入了细化的逻辑，在通用性上宿主的功能就越界了变的不纯粹了。web业务或者html与js有热度的原因很大一部分在于，它的移植性十分的强。包括nodejs，应用逻辑和宿主的关系并不是很紧密，业务代码更大一部分放在了js这端。\n\n#### 浏览器的功能结构\n从web前端转换到其他端js前端开发时，其实回头继续看浏览器就可以了，js在其中的位置大致相同。如果只是做js这端的基础开发只需要了解js引擎与宿主的对接关系就能处理了。\n<div align=center><img src=\"../gallery/webkit.jpeg\" width=\"800\" align=center />\n</div>\n<br/>\n<br/>\n这个是qtwebkit的整体结构，web浏览器外部对接一个js引擎，一个操作系统，一个文档系统。脚本系统不与文档系统直接对接，文档系统的作用就只在初始化视图时用到，剩下的我们看到的dom数据是宿主根据文档数据转化成的视图对象然后注入到js引擎中的。\n```\n### html文档用来申明一个node类的类型，以及类型具备的功能参数的，img表示是图片类型，src表示下载的功能参数，title表示浮窗功能。\n### 如果用不支持图片格式的软件打开图片，图片就是下面这种信息。\n0101 1100 0010 ...\n1111 0000 1001 ...\n### 具体它的解析器规则假设0101代表的是rgba中的每一个，而这每四个构成一个像素的表达,它就是一个屏幕图像信息的表示了。\n### 表达方式可以是任何形式，只要有对应的解释器。html的<img src=\"\" />也是一样，有相应的解释器去解释这一段字符串。\n```\n###### HTMLTokenizer\nHTMLTokenizer是内核中的一个c++类，用来做词法分析检验文档词法的合法性。是从字节流到特定格式的字符串。网页头部设置的utf-8就是帮助词法分析器去做字节处理的，当然不输的话也能自己找到匹配的解析方式，内置的nextToken函数会循环去读每读取一段就标记一段的处理状态并输出一个解释的词语。\n```\n### 在界面上看到html文档可能是utf-8,不过在下载完成后是从一种文件系统到另一个系统的对接，文件会被直接转成字节码。\n### HTMLTokenizer 的具体功能就是用来做字节流的解码的。转化成能认识的编码。如果是不支持的编码方式。也就出现了有时候看到的乱码，乱码出现的点就是在HTMLTokenizer这里了。\n```\n命名还是很好理解的，所以写啥注释，命名好了大概就是提示了。\n<br/>\n<div align=center>\n    <img src=\"../gallery/ma.jpeg\" width=\"800\" align=center />\n    <img src=\"../gallery/string.jpeg\" width=\"800\" align=center />\n</div>\n<br/>\n这其中也包含一部分xss攻击的处理，对于包含非法信息的标签进行过滤。在进行视图对接前就将数据处理干净，默默的感觉有点像接口参数校验。\n<br/>\n<br/>\n<div align=center><img src=\"../gallery/morphology.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n##### HTMLDocumentParser\n虽然HTMLDocumentParser与HTMLTokenizer是两个不同的小系统，但他们在整体里面所起到的作用是近似的都是在做前置数据的准备。一个负责检查转译筛选，一个负责将它转变成另一种形式，HTMLDocumentParser所做的工作就是将词语转成节点。这个处理过程是已栈的方式去做的，即遇到< 标记开始入栈 遇到</标记进行出栈。\n```\n## 解析下面一段文本的方式\n<div><p></p></div>\n[div,p]\n[div]\n[]\n先压入div标签，再压入p标签，处理完p之后再处理完div最后div出栈\n<img src=\"...\" /> => { type: 'img', src: '....', .... }\n```\n\bHTMLDocumentParser内部调用的是HTMLTreeBuilder的constructTree方法进行词语到节点的转化，然后看c++的语法是真漂亮虽然多很多代码。其中很多这种std::是它的智能指针功能，内部有引用计数做垃圾回收。经过前两步处理完的数据最后的节点信息就是即将进行渲染的信息，html和js交互处理的实际上是这部分信息，比如在html加载的过程遇到js控制dom更改的过程。GUI和js访问的是同一个资源信息，GUI根据节点信息渲染dom，当js申请操作修改时节点信息就被锁住，GUI工作就需要被暂停，当js修改信息完成资源访问就被释放。\n<br/>\n<div align=center><img src=\"../gallery/treebuild.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/treefun.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/pross.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n##### node系统\nnode系统可以说是webkit最核心的功能，它赋予了js中的document下所有dom中的各种能力，比如调用底层注册事件等。不能完全看明白或者理解oop是什么，不过能学习到如何通过oop的方式去进行多系统的对接，可以把node与其他系统的连接看成下面这种形式。\n<br/>\n<div align=center><img src=\"../gallery/node-tree.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n```\nclass Event {\n    constructor() {\n    }\n\n    static queue = [];\n\n    add() {...}\n\n    remove() {...}\n}\n\nclass GuI {\n    constructor() {}\n\n    static render() {\n        sys.Gui()\n    }\n\n    start() {....}\n    stop() {....}\n}\n\nclass Src {\n    constructor() {}\n\n    Io(src) {\n        sys.Io(src);\n    }\n}\n\nclass Node extends Event, GuI {\n    constructor() { super(); }\n\n    ....\n}\n```\n###### react中通过继承做界面的组合\n真的比较懒所以这个图真的有点丑！这个方式是从其他人那里学到的，不过他的方式是不做整体页面的组合，都是做颗粒度比较小的界面部件的类型封装，这种是很灵活的。\n<div align=center><img src=\"../gallery/react.jpeg\" width=\"800\" align=center/>\n</div>\n```\n### js没有多继承搞这种真的是有点不舒服\n### 一层层的拆成小的碎片\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            param: {},\n        }\n        this.initState();\n    }\n\n    initState(param) {\n        return null;\n    }\n\n    /** 获取表单数据 **/\n    getFormData() {\n        ......\n        暴露给外部获取数据\n    }\n\n    /** 过滤表单数据 **/\n    filterFormData() {\n        ......\n        内部功能函数\n    }\n\n    render() {\n        return (\n            <div>{ 视图逻辑 }</div>\n        )\n    }\n}\n\nclass SearchBtn extends Search {\n    constructor(props) {\n        super(props);\n    }\n\n    /** 与外部对接的过程 **/\n    onSubmitReq(param) {\n        return null;\n    }\n\n    /** 内部处理过程 **/\n    onSubmit() {\n        const data = this.getFormData();\n        this.onSubmit(data);\n    }\n\n    render() {\n        return (\n            <div>\n            { super.render() }\n            <div>\n                { 按钮视图 }\n            </div>\n            </div>\n        )\n    }\n}\n\nclass List extends SearchBtn {\n    constructor(props) {\n        super(props);\n    }\n\n    initState() {\n        this.state.list = [];\n    }\n\n    onSubmitReq(params) {\n        api(params);\n    }\n\n    render() {\n        return (\n            <div>\n                { super.render() }\n                <table>\n            </div>\n        )\n    }\n}\n```\n\nnode通过继承将各种能力添加到dom中，拆看来看单个父类的功能是很纯净的。在Event中自己维护和系统事件的对接，当监听到某一事件的触发，就调用注册的监听的控制器传入上层，在底层系统中的事件处理是没有目标的这个概念只有事件类型input类型事件click类型事件。这个处理方式也是对于本系统可控的方式的一点，系统的边界必须明确，比如从a-b的对接，其实我并不知道具体是a里面的谁要求做了这件事,事实是b也不需要知道。如果b连谁做了也要分析的话今天有abc申请了明天有mgn申请了，那这也太头痛了我只需要知道自己能处理的是input操作click操作处理了就丢出去你自己找是谁申请的。所以到前端这边也就存在了捕获和冒泡这种东西。为了保持底层的在移植的过程中的通用性。同时将对接的多个能力拆分到不同的类型中，分散治理将功能隔离开。\n<div align=center><img src=\"../gallery/event.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/event-sys.jpeg\" width=\"800\" align=center/>\n</div>\n<div align=center><img src=\"../gallery/addle1.jpeg\" width=\"800\" align=center/>\n</div>\n```\nfunction add(a, b, c, d) {\n    .......\n    // **从一个应用到另一个应用**\n    sys.add(a,b,c)\n}\n```\n最后再回想conf上崔红保大佬说的不要频繁setData,以及为什么会出现vdom这个东西。由于js去直接操作dom不是在前端这边操作数据而是调用内核暴露出来的能力去修改内核中存储的dom节点信息。在信息不大的情况下其实都还好，大数据量的dom操作情况下相当于频繁的从a-b-c-d而且是从一个系统到另一系统的调用一个线程到另一个线程的通信。这个代价是高的，既然视图都是从数据去转成视图的，那前端先处理好视图数据最后集体调内核能力，vdom就是视图数据在前端的一种体现因为要做时间切片等优化在数据上又扩充了一些其他信息，react的fiber架构中单个节点中出现的time信息就是一个例子。\n#### vdom\nvdom有点像在js这端做的从html到节点转换的工作，当然附加了更多的运行时的数据，包含原有dom比原有dom的信息更丰富。react，vue之前的dom是由html文档提供初始化的视图数据浏览器解析然后返回到js，js属于直接操作dom，因为js本地其实是不存储视图关系（也可以用jq去实现vdom），所以有更改就要直接调用api操作浏览器内部的数据，vdom所解决的就是视图数据在前端的管理以及控制js这端调用浏览器操作的频率。\n\n<div align=center><img src=\"../gallery/vdom.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n<br/>\n```\nupdatequeue = [vdom1, vdom2, vdom3, vdom4];\n// 每个vdom包含扩展信息又包含原始信息，始终能根据原始信息找到对应的原始dom和调用原始dom的api\nvdom = {\n    dom: dom,\n    time: 123,\n    vdomobject: {}, \n}\n当调用set的时候更新并推到队列里，如果一个时间片内的长度是5，那么当有5个更新节点时就一次推动更新。当然描述可能存在误差但是主要是想表明在这里面，先借助vdom做前置处理，最后反应结果到dom上。\n```\n到这里其实多端方案的思路其实也比较清楚了，深入的话就到实际开发中去了。\n##### react时间切片更新方案的大概方式\n由于vdom是对于dom的一种反应，所以在前端js层是一个多叉树的结构去存储视图数据的，每个节点就是一个完整的fiber。前端开发使用vue或者react这套方案去做本质还是对一颗树的节点进行操作。所以，就会涉及到对于树的查找对于树的节点替换更新。多叉树的查找性能随着树的深度而加深，diff方案优化的是在前端对于数据树中的单个更新节点的查找，最后的更新还是整棵树的更新。\n<br/>\n<br/>\n<div align=center><img src=\"../gallery/treeu.jpeg\" width=\"800\" align=center/>\n</div>\n<br/>\n<br/>\n来看下react的最小更新方案，\breact的fiber方案中。在单个节点也会存在一个updatequeue，如果打印一下父子组件的生命周期会发现它的过程是先子组件触发然后父子组件触发，它的更新方案是节点内的自治自下而上的传导，也就是小范围内的触发更新。vueconf上3.0说依旧保持模版方案，并且会加入动静结合的方式对存在变动的节点加入监听自己的理解应该也是这么个意思。在将模版信息转成对象信息的时候在这个转化的过程中就会插入记录有花括号的或者有for循环，就是揭露有可能存在更改的更改的节点，因为vue是以劫持的方式去监听更新的，如果用代理的方式去处理每个节点都创建一个代理对象，这自然在性能上是很大的开销因为你会为此加入类型推导判断是否存在变化，也就是在运行时不管有没有变化都会做判断逻辑，也就必然存在时间的增加。这和要求我们尽量是用const不用let是一个意思，const声明的是常量不会存在类型变化，v8内核不会在运行时不会为此做类型变化的判断。另外在尤大提到的3.0将去除class和装饰器的支持之前自己是很喜欢用装饰器的也并没有考虑到装饰器带来的不稳定性，这涉及到函数的返回副作用，这个也是监测点。\n```\n#### react的高阶函数\nfunction Component(Target) {\n    return class extends React.Component {\n\n    }\n}\n高阶函数的副作用在于尽管在代码层面看起来他们都是一样的结构，但是函数的返回始终是一个新的对象，他们其实并不相等。代码存在复用，在实际的运行时内存中的数据不存在复用。\njs的函数参数的指针是隐式的，即不管传入的参数是否在函数内有操作，所返回的值都是要在内存中创建一个新的数据与指针，存在空间的损耗。\n```\n真正的更新操作是，js在一定的周期内内部自治完成对节点信息的替换更新，然后调用api将维护完的数据树同步到浏览器中。像上图中的两颗树，当某个范围内的节点触发set时，将js存储的数据树中关于视图部分的信息更新掉。\n```\n{\n    type: 'div',\n    data: {\n        list: [1,2,3],\n    },\n    html: `<div>{ this.list }</div>`\n}\n{\n    data: {\n        list: [3,4,5],\n    },\n    html: `<div>{ this.list }</div>`\n}\n```\n像这样的节点整颗更新掉之后，html的信息其实已经替换成最新的，然后innerhtml=*****。触发浏览器的视图刷新，这样就避免了一次次的调用api，也就变成了时间切片了，在一定时间内我这边自己做好处理再通知你。\n\n##### 现在的多端方案使用vue和react，借用的点是什么？\n其他端和浏览器是一致的，他们唯一借助的点是vue和react关于视图数据的管理和更新。唯一存在魔改的点在视图功能的对接口，即在浏览器端src和title可能对应的是node类中的一中功能，在安卓端这两个属性对应的实现点又是另一种方式。\n```\n<img src=**** title=***/>\n```\n所以慢慢的有一种感觉就是虽然都是react和vue但是其实已经不是之前在web端使用的了。\n","slug":"vueconf","published":1,"updated":"2019-06-24T13:02:40.277Z","_id":"cjxadu7y8000b5u5fezz3e9zb","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>基于对之前的一版不太满意的原因的下，今天做了两张图细化一下。同时更想说清楚为什么会出现vdom，以及进行react和vue的跨平台方案的切入点到底在哪里。看多端方案和vdom之前其实还是有必要去看原始web开发的实际生产中怎么做到从html，js到浏览器应用的这个过程，这个对于多端方案的理解是有很大帮助，现有多端方案细化的点不是很清楚，但是在大的架构方面都是相差不大的。</p>\n</blockquote>\n<h5 id=\"web端开发\"><a href=\"#web端开发\" class=\"headerlink\" title=\"web端开发\"></a>web端开发</h5><p>web应用其实可以解释成浏览器的子产品和小程序如出一辙，只是宿主平台不一样。企业或用户的产品都是运行在同一个应用上的，chrome本身就是一个产品你开多少个浏览器访问多少个网站都是在这个宿主上去做事情。看宿主和web应用或者hybrid或者是react-native，大的方式都是一致的，宿主对于用户操作通用行为的封装暴露出接口，同时抽象一套视图系统，同时将视图系统与系统操作能力注入到JScore中。宿主所能提供的就是前进后退，操作响应，网络与文件io，设备调用这些通用的业务功能，至于是付款还是表单输入信息，输入的是什么这些上层操作就不在宿主考虑的范围了，如果掺入了细化的逻辑，在通用性上宿主的功能就越界了变的不纯粹了。web业务或者html与js有热度的原因很大一部分在于，它的移植性十分的强。包括nodejs，应用逻辑和宿主的关系并不是很紧密，业务代码更大一部分放在了js这端。</p>\n<h4 id=\"浏览器的功能结构\"><a href=\"#浏览器的功能结构\" class=\"headerlink\" title=\"浏览器的功能结构\"></a>浏览器的功能结构</h4><p>从web前端转换到其他端js前端开发时，其实回头继续看浏览器就可以了，js在其中的位置大致相同。如果只是做js这端的基础开发只需要了解js引擎与宿主的对接关系就能处理了。</p>\n<p><div align=\"center\"><img src=\"../gallery/webkit.jpeg\" width=\"800\" align=\"center\"><br></div><br><br><br><br><br>这个是qtwebkit的整体结构，web浏览器外部对接一个js引擎，一个操作系统，一个文档系统。脚本系统不与文档系统直接对接，文档系统的作用就只在初始化视图时用到，剩下的我们看到的dom数据是宿主根据文档数据转化成的视图对象然后注入到js引擎中的。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### html文档用来申明一个node类的类型，以及类型具备的功能参数的，img表示是图片类型，src表示下载的功能参数，title表示浮窗功能。</span><br><span class=\"line\">### 如果用不支持图片格式的软件打开图片，图片就是下面这种信息。</span><br><span class=\"line\">0101 1100 0010 ...</span><br><span class=\"line\">1111 0000 1001 ...</span><br><span class=\"line\">### 具体它的解析器规则假设0101代表的是rgba中的每一个，而这每四个构成一个像素的表达,它就是一个屏幕图像信息的表示了。</span><br><span class=\"line\">### 表达方式可以是任何形式，只要有对应的解释器。html的&lt;img src=&quot;&quot; /&gt;也是一样，有相应的解释器去解释这一段字符串。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"HTMLTokenizer\"><a href=\"#HTMLTokenizer\" class=\"headerlink\" title=\"HTMLTokenizer\"></a>HTMLTokenizer</h6><p>HTMLTokenizer是内核中的一个c++类，用来做词法分析检验文档词法的合法性。是从字节流到特定格式的字符串。网页头部设置的utf-8就是帮助词法分析器去做字节处理的，当然不输的话也能自己找到匹配的解析方式，内置的nextToken函数会循环去读每读取一段就标记一段的处理状态并输出一个解释的词语。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 在界面上看到html文档可能是utf-8,不过在下载完成后是从一种文件系统到另一个系统的对接，文件会被直接转成字节码。</span><br><span class=\"line\">### HTMLTokenizer 的具体功能就是用来做字节流的解码的。转化成能认识的编码。如果是不支持的编码方式。也就出现了有时候看到的乱码，乱码出现的点就是在HTMLTokenizer这里了。</span><br></pre></td></tr></table></figure></p>\n<p>命名还是很好理解的，所以写啥注释，命名好了大概就是提示了。<br><br></p>\n<p><div align=\"center\"><br>    <img src=\"../gallery/ma.jpeg\" width=\"800\" align=\"center\"><br>    <img src=\"../gallery/string.jpeg\" width=\"800\" align=\"center\"><br></div><br><br><br>这其中也包含一部分xss攻击的处理，对于包含非法信息的标签进行过滤。在进行视图对接前就将数据处理干净，默默的感觉有点像接口参数校验。<br><br><br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/morphology.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br></p>\n<h5 id=\"HTMLDocumentParser\"><a href=\"#HTMLDocumentParser\" class=\"headerlink\" title=\"HTMLDocumentParser\"></a>HTMLDocumentParser</h5><p>虽然HTMLDocumentParser与HTMLTokenizer是两个不同的小系统，但他们在整体里面所起到的作用是近似的都是在做前置数据的准备。一个负责检查转译筛选，一个负责将它转变成另一种形式，HTMLDocumentParser所做的工作就是将词语转成节点。这个处理过程是已栈的方式去做的，即遇到&lt; 标记开始入栈 遇到&lt;/标记进行出栈。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 解析下面一段文本的方式</span><br><span class=\"line\">&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class=\"line\">[div,p]</span><br><span class=\"line\">[div]</span><br><span class=\"line\">[]</span><br><span class=\"line\">先压入div标签，再压入p标签，处理完p之后再处理完div最后div出栈</span><br><span class=\"line\">&lt;img src=&quot;...&quot; /&gt; =&gt; &#123; type: &apos;img&apos;, src: &apos;....&apos;, .... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>\bHTMLDocumentParser内部调用的是HTMLTreeBuilder的constructTree方法进行词语到节点的转化，然后看c++的语法是真漂亮虽然多很多代码。其中很多这种std::是它的智能指针功能，内部有引用计数做垃圾回收。经过前两步处理完的数据最后的节点信息就是即将进行渲染的信息，html和js交互处理的实际上是这部分信息，比如在html加载的过程遇到js控制dom更改的过程。GUI和js访问的是同一个资源信息，GUI根据节点信息渲染dom，当js申请操作修改时节点信息就被锁住，GUI工作就需要被暂停，当js修改信息完成资源访问就被释放。<br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/treebuild.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/treefun.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/pross.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br></p>\n<h5 id=\"node系统\"><a href=\"#node系统\" class=\"headerlink\" title=\"node系统\"></a>node系统</h5><p>node系统可以说是webkit最核心的功能，它赋予了js中的document下所有dom中的各种能力，比如调用底层注册事件等。不能完全看明白或者理解oop是什么，不过能学习到如何通过oop的方式去进行多系统的对接，可以把node与其他系统的连接看成下面这种形式。<br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/node-tree.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Event &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static queue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class GuI &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static render() &#123;</span><br><span class=\"line\">        sys.Gui()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;....&#125;</span><br><span class=\"line\">    stop() &#123;....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Src &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Io(src) &#123;</span><br><span class=\"line\">        sys.Io(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Node extends Event, GuI &#123;</span><br><span class=\"line\">    constructor() &#123; super(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"react中通过继承做界面的组合\"><a href=\"#react中通过继承做界面的组合\" class=\"headerlink\" title=\"react中通过继承做界面的组合\"></a>react中通过继承做界面的组合</h6><p>真的比较懒所以这个图真的有点丑！这个方式是从其他人那里学到的，不过他的方式是不做整体页面的组合，都是做颗粒度比较小的界面部件的类型封装，这种是很灵活的。</p>\n<p><div align=\"center\"><img src=\"../gallery/react.jpeg\" width=\"800\" align=\"center/\"><br></div><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### js没有多继承搞这种真的是有点不舒服</span><br><span class=\"line\">### 一层层的拆成小的碎片</span><br><span class=\"line\"></span><br><span class=\"line\">class Search extends React.Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            param: &#123;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.initState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    initState(param) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 获取表单数据 **/</span><br><span class=\"line\">    getFormData() &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        暴露给外部获取数据</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 过滤表单数据 **/</span><br><span class=\"line\">    filterFormData() &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        内部功能函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;&#123; 视图逻辑 &#125;&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchBtn extends Search &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 与外部对接的过程 **/</span><br><span class=\"line\">    onSubmitReq(param) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 内部处理过程 **/</span><br><span class=\"line\">    onSubmit() &#123;</span><br><span class=\"line\">        const data = this.getFormData();</span><br><span class=\"line\">        this.onSubmit(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">            &#123; super.render() &#125;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123; 按钮视图 &#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class List extends SearchBtn &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    initState() &#123;</span><br><span class=\"line\">        this.state.list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onSubmitReq(params) &#123;</span><br><span class=\"line\">        api(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123; super.render() &#125;</span><br><span class=\"line\">                &lt;table&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>node通过继承将各种能力添加到dom中，拆看来看单个父类的功能是很纯净的。在Event中自己维护和系统事件的对接，当监听到某一事件的触发，就调用注册的监听的控制器传入上层，在底层系统中的事件处理是没有目标的这个概念只有事件类型input类型事件click类型事件。这个处理方式也是对于本系统可控的方式的一点，系统的边界必须明确，比如从a-b的对接，其实我并不知道具体是a里面的谁要求做了这件事,事实是b也不需要知道。如果b连谁做了也要分析的话今天有abc申请了明天有mgn申请了，那这也太头痛了我只需要知道自己能处理的是input操作click操作处理了就丢出去你自己找是谁申请的。所以到前端这边也就存在了捕获和冒泡这种东西。为了保持底层的在移植的过程中的通用性。同时将对接的多个能力拆分到不同的类型中，分散治理将功能隔离开。</p>\n<p><div align=\"center\"><img src=\"../gallery/event.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/event-sys.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/addle1.jpeg\" width=\"800\" align=\"center/\"><br></div><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b, c, d) &#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">    // **从一个应用到另一个应用**</span><br><span class=\"line\">    sys.add(a,b,c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后再回想conf上崔红保大佬说的不要频繁setData,以及为什么会出现vdom这个东西。由于js去直接操作dom不是在前端这边操作数据而是调用内核暴露出来的能力去修改内核中存储的dom节点信息。在信息不大的情况下其实都还好，大数据量的dom操作情况下相当于频繁的从a-b-c-d而且是从一个系统到另一系统的调用一个线程到另一个线程的通信。这个代价是高的，既然视图都是从数据去转成视图的，那前端先处理好视图数据最后集体调内核能力，vdom就是视图数据在前端的一种体现因为要做时间切片等优化在数据上又扩充了一些其他信息，react的fiber架构中单个节点中出现的time信息就是一个例子。</p>\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>vdom有点像在js这端做的从html到节点转换的工作，当然附加了更多的运行时的数据，包含原有dom比原有dom的信息更丰富。react，vue之前的dom是由html文档提供初始化的视图数据浏览器解析然后返回到js，js属于直接操作dom，因为js本地其实是不存储视图关系（也可以用jq去实现vdom），所以有更改就要直接调用api操作浏览器内部的数据，vdom所解决的就是视图数据在前端的管理以及控制js这端调用浏览器操作的频率。</p>\n<p><div align=\"center\"><img src=\"../gallery/vdom.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><br><br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatequeue = [vdom1, vdom2, vdom3, vdom4];</span><br><span class=\"line\">// 每个vdom包含扩展信息又包含原始信息，始终能根据原始信息找到对应的原始dom和调用原始dom的api</span><br><span class=\"line\">vdom = &#123;</span><br><span class=\"line\">    dom: dom,</span><br><span class=\"line\">    time: 123,</span><br><span class=\"line\">    vdomobject: &#123;&#125;, </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">当调用set的时候更新并推到队列里，如果一个时间片内的长度是5，那么当有5个更新节点时就一次推动更新。当然描述可能存在误差但是主要是想表明在这里面，先借助vdom做前置处理，最后反应结果到dom上。</span><br></pre></td></tr></table></figure></p>\n<p>到这里其实多端方案的思路其实也比较清楚了，深入的话就到实际开发中去了。</p>\n<h5 id=\"react时间切片更新方案的大概方式\"><a href=\"#react时间切片更新方案的大概方式\" class=\"headerlink\" title=\"react时间切片更新方案的大概方式\"></a>react时间切片更新方案的大概方式</h5><p>由于vdom是对于dom的一种反应，所以在前端js层是一个多叉树的结构去存储视图数据的，每个节点就是一个完整的fiber。前端开发使用vue或者react这套方案去做本质还是对一颗树的节点进行操作。所以，就会涉及到对于树的查找对于树的节点替换更新。多叉树的查找性能随着树的深度而加深，diff方案优化的是在前端对于数据树中的单个更新节点的查找，最后的更新还是整棵树的更新。<br><br><br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/treeu.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><br><br>来看下react的最小更新方案，\breact的fiber方案中。在单个节点也会存在一个updatequeue，如果打印一下父子组件的生命周期会发现它的过程是先子组件触发然后父子组件触发，它的更新方案是节点内的自治自下而上的传导，也就是小范围内的触发更新。vueconf上3.0说依旧保持模版方案，并且会加入动静结合的方式对存在变动的节点加入监听自己的理解应该也是这么个意思。在将模版信息转成对象信息的时候在这个转化的过程中就会插入记录有花括号的或者有for循环，就是揭露有可能存在更改的更改的节点，因为vue是以劫持的方式去监听更新的，如果用代理的方式去处理每个节点都创建一个代理对象，这自然在性能上是很大的开销因为你会为此加入类型推导判断是否存在变化，也就是在运行时不管有没有变化都会做判断逻辑，也就必然存在时间的增加。这和要求我们尽量是用const不用let是一个意思，const声明的是常量不会存在类型变化，v8内核不会在运行时不会为此做类型变化的判断。另外在尤大提到的3.0将去除class和装饰器的支持之前自己是很喜欢用装饰器的也并没有考虑到装饰器带来的不稳定性，这涉及到函数的返回副作用，这个也是监测点。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### react的高阶函数</span><br><span class=\"line\">function Component(Target) &#123;</span><br><span class=\"line\">    return class extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">高阶函数的副作用在于尽管在代码层面看起来他们都是一样的结构，但是函数的返回始终是一个新的对象，他们其实并不相等。代码存在复用，在实际的运行时内存中的数据不存在复用。</span><br><span class=\"line\">js的函数参数的指针是隐式的，即不管传入的参数是否在函数内有操作，所返回的值都是要在内存中创建一个新的数据与指针，存在空间的损耗。</span><br></pre></td></tr></table></figure></p>\n<p>真正的更新操作是，js在一定的周期内内部自治完成对节点信息的替换更新，然后调用api将维护完的数据树同步到浏览器中。像上图中的两颗树，当某个范围内的节点触发set时，将js存储的数据树中关于视图部分的信息更新掉。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: &apos;div&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [1,2,3],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    html: `&lt;div&gt;&#123; this.list &#125;&lt;/div&gt;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [3,4,5],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    html: `&lt;div&gt;&#123; this.list &#125;&lt;/div&gt;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>像这样的节点整颗更新掉之后，html的信息其实已经替换成最新的，然后innerhtml=<strong>*</strong>。触发浏览器的视图刷新，这样就避免了一次次的调用api，也就变成了时间切片了，在一定时间内我这边自己做好处理再通知你。</p>\n<h5 id=\"现在的多端方案使用vue和react，借用的点是什么？\"><a href=\"#现在的多端方案使用vue和react，借用的点是什么？\" class=\"headerlink\" title=\"现在的多端方案使用vue和react，借用的点是什么？\"></a>现在的多端方案使用vue和react，借用的点是什么？</h5><p>其他端和浏览器是一致的，他们唯一借助的点是vue和react关于视图数据的管理和更新。唯一存在魔改的点在视图功能的对接口，即在浏览器端src和title可能对应的是node类中的一中功能，在安卓端这两个属性对应的实现点又是另一种方式。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=**** title=***/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>所以慢慢的有一种感觉就是虽然都是react和vue但是其实已经不是之前在web端使用的了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>基于对之前的一版不太满意的原因的下，今天做了两张图细化一下。同时更想说清楚为什么会出现vdom，以及进行react和vue的跨平台方案的切入点到底在哪里。看多端方案和vdom之前其实还是有必要去看原始web开发的实际生产中怎么做到从html，js到浏览器应用的这个过程，这个对于多端方案的理解是有很大帮助，现有多端方案细化的点不是很清楚，但是在大的架构方面都是相差不大的。</p>\n</blockquote>\n<h5 id=\"web端开发\"><a href=\"#web端开发\" class=\"headerlink\" title=\"web端开发\"></a>web端开发</h5><p>web应用其实可以解释成浏览器的子产品和小程序如出一辙，只是宿主平台不一样。企业或用户的产品都是运行在同一个应用上的，chrome本身就是一个产品你开多少个浏览器访问多少个网站都是在这个宿主上去做事情。看宿主和web应用或者hybrid或者是react-native，大的方式都是一致的，宿主对于用户操作通用行为的封装暴露出接口，同时抽象一套视图系统，同时将视图系统与系统操作能力注入到JScore中。宿主所能提供的就是前进后退，操作响应，网络与文件io，设备调用这些通用的业务功能，至于是付款还是表单输入信息，输入的是什么这些上层操作就不在宿主考虑的范围了，如果掺入了细化的逻辑，在通用性上宿主的功能就越界了变的不纯粹了。web业务或者html与js有热度的原因很大一部分在于，它的移植性十分的强。包括nodejs，应用逻辑和宿主的关系并不是很紧密，业务代码更大一部分放在了js这端。</p>\n<h4 id=\"浏览器的功能结构\"><a href=\"#浏览器的功能结构\" class=\"headerlink\" title=\"浏览器的功能结构\"></a>浏览器的功能结构</h4><p>从web前端转换到其他端js前端开发时，其实回头继续看浏览器就可以了，js在其中的位置大致相同。如果只是做js这端的基础开发只需要了解js引擎与宿主的对接关系就能处理了。</p>\n<p><div align=\"center\"><img src=\"../gallery/webkit.jpeg\" width=\"800\" align=\"center\"><br></div><br><br><br><br><br>这个是qtwebkit的整体结构，web浏览器外部对接一个js引擎，一个操作系统，一个文档系统。脚本系统不与文档系统直接对接，文档系统的作用就只在初始化视图时用到，剩下的我们看到的dom数据是宿主根据文档数据转化成的视图对象然后注入到js引擎中的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### html文档用来申明一个node类的类型，以及类型具备的功能参数的，img表示是图片类型，src表示下载的功能参数，title表示浮窗功能。</span><br><span class=\"line\">### 如果用不支持图片格式的软件打开图片，图片就是下面这种信息。</span><br><span class=\"line\">0101 1100 0010 ...</span><br><span class=\"line\">1111 0000 1001 ...</span><br><span class=\"line\">### 具体它的解析器规则假设0101代表的是rgba中的每一个，而这每四个构成一个像素的表达,它就是一个屏幕图像信息的表示了。</span><br><span class=\"line\">### 表达方式可以是任何形式，只要有对应的解释器。html的&lt;img src=&quot;&quot; /&gt;也是一样，有相应的解释器去解释这一段字符串。</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"HTMLTokenizer\"><a href=\"#HTMLTokenizer\" class=\"headerlink\" title=\"HTMLTokenizer\"></a>HTMLTokenizer</h6><p>HTMLTokenizer是内核中的一个c++类，用来做词法分析检验文档词法的合法性。是从字节流到特定格式的字符串。网页头部设置的utf-8就是帮助词法分析器去做字节处理的，当然不输的话也能自己找到匹配的解析方式，内置的nextToken函数会循环去读每读取一段就标记一段的处理状态并输出一个解释的词语。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 在界面上看到html文档可能是utf-8,不过在下载完成后是从一种文件系统到另一个系统的对接，文件会被直接转成字节码。</span><br><span class=\"line\">### HTMLTokenizer 的具体功能就是用来做字节流的解码的。转化成能认识的编码。如果是不支持的编码方式。也就出现了有时候看到的乱码，乱码出现的点就是在HTMLTokenizer这里了。</span><br></pre></td></tr></table></figure></p>\n<p>命名还是很好理解的，所以写啥注释，命名好了大概就是提示了。<br><br></p>\n<p><div align=\"center\"><br>    <img src=\"../gallery/ma.jpeg\" width=\"800\" align=\"center\"><br>    <img src=\"../gallery/string.jpeg\" width=\"800\" align=\"center\"><br></div><br><br><br>这其中也包含一部分xss攻击的处理，对于包含非法信息的标签进行过滤。在进行视图对接前就将数据处理干净，默默的感觉有点像接口参数校验。<br><br><br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/morphology.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br></p>\n<h5 id=\"HTMLDocumentParser\"><a href=\"#HTMLDocumentParser\" class=\"headerlink\" title=\"HTMLDocumentParser\"></a>HTMLDocumentParser</h5><p>虽然HTMLDocumentParser与HTMLTokenizer是两个不同的小系统，但他们在整体里面所起到的作用是近似的都是在做前置数据的准备。一个负责检查转译筛选，一个负责将它转变成另一种形式，HTMLDocumentParser所做的工作就是将词语转成节点。这个处理过程是已栈的方式去做的，即遇到&lt; 标记开始入栈 遇到&lt;/标记进行出栈。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 解析下面一段文本的方式</span><br><span class=\"line\">&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class=\"line\">[div,p]</span><br><span class=\"line\">[div]</span><br><span class=\"line\">[]</span><br><span class=\"line\">先压入div标签，再压入p标签，处理完p之后再处理完div最后div出栈</span><br><span class=\"line\">&lt;img src=&quot;...&quot; /&gt; =&gt; &#123; type: &apos;img&apos;, src: &apos;....&apos;, .... &#125;</span><br></pre></td></tr></table></figure></p>\n<p>\bHTMLDocumentParser内部调用的是HTMLTreeBuilder的constructTree方法进行词语到节点的转化，然后看c++的语法是真漂亮虽然多很多代码。其中很多这种std::是它的智能指针功能，内部有引用计数做垃圾回收。经过前两步处理完的数据最后的节点信息就是即将进行渲染的信息，html和js交互处理的实际上是这部分信息，比如在html加载的过程遇到js控制dom更改的过程。GUI和js访问的是同一个资源信息，GUI根据节点信息渲染dom，当js申请操作修改时节点信息就被锁住，GUI工作就需要被暂停，当js修改信息完成资源访问就被释放。<br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/treebuild.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/treefun.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/pross.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br></p>\n<h5 id=\"node系统\"><a href=\"#node系统\" class=\"headerlink\" title=\"node系统\"></a>node系统</h5><p>node系统可以说是webkit最核心的功能，它赋予了js中的document下所有dom中的各种能力，比如调用底层注册事件等。不能完全看明白或者理解oop是什么，不过能学习到如何通过oop的方式去进行多系统的对接，可以把node与其他系统的连接看成下面这种形式。<br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/node-tree.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Event &#123;</span><br><span class=\"line\">    constructor() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static queue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    add() &#123;...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    remove() &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class GuI &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    static render() &#123;</span><br><span class=\"line\">        sys.Gui()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    start() &#123;....&#125;</span><br><span class=\"line\">    stop() &#123;....&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Src &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Io(src) &#123;</span><br><span class=\"line\">        sys.Io(src);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Node extends Event, GuI &#123;</span><br><span class=\"line\">    constructor() &#123; super(); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h6 id=\"react中通过继承做界面的组合\"><a href=\"#react中通过继承做界面的组合\" class=\"headerlink\" title=\"react中通过继承做界面的组合\"></a>react中通过继承做界面的组合</h6><p>真的比较懒所以这个图真的有点丑！这个方式是从其他人那里学到的，不过他的方式是不做整体页面的组合，都是做颗粒度比较小的界面部件的类型封装，这种是很灵活的。</p>\n<p><div align=\"center\"><img src=\"../gallery/react.jpeg\" width=\"800\" align=\"center/\"><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### js没有多继承搞这种真的是有点不舒服</span><br><span class=\"line\">### 一层层的拆成小的碎片</span><br><span class=\"line\"></span><br><span class=\"line\">class Search extends React.Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            param: &#123;&#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        this.initState();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    initState(param) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 获取表单数据 **/</span><br><span class=\"line\">    getFormData() &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        暴露给外部获取数据</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 过滤表单数据 **/</span><br><span class=\"line\">    filterFormData() &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        内部功能函数</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;&#123; 视图逻辑 &#125;&lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SearchBtn extends Search &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 与外部对接的过程 **/</span><br><span class=\"line\">    onSubmitReq(param) &#123;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /** 内部处理过程 **/</span><br><span class=\"line\">    onSubmit() &#123;</span><br><span class=\"line\">        const data = this.getFormData();</span><br><span class=\"line\">        this.onSubmit(data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">            &#123; super.render() &#125;</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123; 按钮视图 &#125;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class List extends SearchBtn &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    initState() &#123;</span><br><span class=\"line\">        this.state.list = [];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onSubmitReq(params) &#123;</span><br><span class=\"line\">        api(params);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &#123; super.render() &#125;</span><br><span class=\"line\">                &lt;table&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>node通过继承将各种能力添加到dom中，拆看来看单个父类的功能是很纯净的。在Event中自己维护和系统事件的对接，当监听到某一事件的触发，就调用注册的监听的控制器传入上层，在底层系统中的事件处理是没有目标的这个概念只有事件类型input类型事件click类型事件。这个处理方式也是对于本系统可控的方式的一点，系统的边界必须明确，比如从a-b的对接，其实我并不知道具体是a里面的谁要求做了这件事,事实是b也不需要知道。如果b连谁做了也要分析的话今天有abc申请了明天有mgn申请了，那这也太头痛了我只需要知道自己能处理的是input操作click操作处理了就丢出去你自己找是谁申请的。所以到前端这边也就存在了捕获和冒泡这种东西。为了保持底层的在移植的过程中的通用性。同时将对接的多个能力拆分到不同的类型中，分散治理将功能隔离开。</p>\n<p><div align=\"center\"><img src=\"../gallery/event.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/event-sys.jpeg\" width=\"800\" align=\"center/\"><br></div></p>\n<p><div align=\"center\"><img src=\"../gallery/addle1.jpeg\" width=\"800\" align=\"center/\"><br></div><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function add(a, b, c, d) &#123;</span><br><span class=\"line\">    .......</span><br><span class=\"line\">    // **从一个应用到另一个应用**</span><br><span class=\"line\">    sys.add(a,b,c)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>最后再回想conf上崔红保大佬说的不要频繁setData,以及为什么会出现vdom这个东西。由于js去直接操作dom不是在前端这边操作数据而是调用内核暴露出来的能力去修改内核中存储的dom节点信息。在信息不大的情况下其实都还好，大数据量的dom操作情况下相当于频繁的从a-b-c-d而且是从一个系统到另一系统的调用一个线程到另一个线程的通信。这个代价是高的，既然视图都是从数据去转成视图的，那前端先处理好视图数据最后集体调内核能力，vdom就是视图数据在前端的一种体现因为要做时间切片等优化在数据上又扩充了一些其他信息，react的fiber架构中单个节点中出现的time信息就是一个例子。</p>\n<h4 id=\"vdom\"><a href=\"#vdom\" class=\"headerlink\" title=\"vdom\"></a>vdom</h4><p>vdom有点像在js这端做的从html到节点转换的工作，当然附加了更多的运行时的数据，包含原有dom比原有dom的信息更丰富。react，vue之前的dom是由html文档提供初始化的视图数据浏览器解析然后返回到js，js属于直接操作dom，因为js本地其实是不存储视图关系（也可以用jq去实现vdom），所以有更改就要直接调用api操作浏览器内部的数据，vdom所解决的就是视图数据在前端的管理以及控制js这端调用浏览器操作的频率。</p>\n<p><div align=\"center\"><img src=\"../gallery/vdom.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updatequeue = [vdom1, vdom2, vdom3, vdom4];</span><br><span class=\"line\">// 每个vdom包含扩展信息又包含原始信息，始终能根据原始信息找到对应的原始dom和调用原始dom的api</span><br><span class=\"line\">vdom = &#123;</span><br><span class=\"line\">    dom: dom,</span><br><span class=\"line\">    time: 123,</span><br><span class=\"line\">    vdomobject: &#123;&#125;, </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">当调用set的时候更新并推到队列里，如果一个时间片内的长度是5，那么当有5个更新节点时就一次推动更新。当然描述可能存在误差但是主要是想表明在这里面，先借助vdom做前置处理，最后反应结果到dom上。</span><br></pre></td></tr></table></figure></p>\n<p>到这里其实多端方案的思路其实也比较清楚了，深入的话就到实际开发中去了。</p>\n<h5 id=\"react时间切片更新方案的大概方式\"><a href=\"#react时间切片更新方案的大概方式\" class=\"headerlink\" title=\"react时间切片更新方案的大概方式\"></a>react时间切片更新方案的大概方式</h5><p>由于vdom是对于dom的一种反应，所以在前端js层是一个多叉树的结构去存储视图数据的，每个节点就是一个完整的fiber。前端开发使用vue或者react这套方案去做本质还是对一颗树的节点进行操作。所以，就会涉及到对于树的查找对于树的节点替换更新。多叉树的查找性能随着树的深度而加深，diff方案优化的是在前端对于数据树中的单个更新节点的查找，最后的更新还是整棵树的更新。<br><br><br><br></p>\n<p><div align=\"center\"><img src=\"../gallery/treeu.jpeg\" width=\"800\" align=\"center/\"><br></div><br><br><br><br><br>来看下react的最小更新方案，\breact的fiber方案中。在单个节点也会存在一个updatequeue，如果打印一下父子组件的生命周期会发现它的过程是先子组件触发然后父子组件触发，它的更新方案是节点内的自治自下而上的传导，也就是小范围内的触发更新。vueconf上3.0说依旧保持模版方案，并且会加入动静结合的方式对存在变动的节点加入监听自己的理解应该也是这么个意思。在将模版信息转成对象信息的时候在这个转化的过程中就会插入记录有花括号的或者有for循环，就是揭露有可能存在更改的更改的节点，因为vue是以劫持的方式去监听更新的，如果用代理的方式去处理每个节点都创建一个代理对象，这自然在性能上是很大的开销因为你会为此加入类型推导判断是否存在变化，也就是在运行时不管有没有变化都会做判断逻辑，也就必然存在时间的增加。这和要求我们尽量是用const不用let是一个意思，const声明的是常量不会存在类型变化，v8内核不会在运行时不会为此做类型变化的判断。另外在尤大提到的3.0将去除class和装饰器的支持之前自己是很喜欢用装饰器的也并没有考虑到装饰器带来的不稳定性，这涉及到函数的返回副作用，这个也是监测点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### react的高阶函数</span><br><span class=\"line\">function Component(Target) &#123;</span><br><span class=\"line\">    return class extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">高阶函数的副作用在于尽管在代码层面看起来他们都是一样的结构，但是函数的返回始终是一个新的对象，他们其实并不相等。代码存在复用，在实际的运行时内存中的数据不存在复用。</span><br><span class=\"line\">js的函数参数的指针是隐式的，即不管传入的参数是否在函数内有操作，所返回的值都是要在内存中创建一个新的数据与指针，存在空间的损耗。</span><br></pre></td></tr></table></figure></p>\n<p>真正的更新操作是，js在一定的周期内内部自治完成对节点信息的替换更新，然后调用api将维护完的数据树同步到浏览器中。像上图中的两颗树，当某个范围内的节点触发set时，将js存储的数据树中关于视图部分的信息更新掉。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    type: &apos;div&apos;,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [1,2,3],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    html: `&lt;div&gt;&#123; this.list &#125;&lt;/div&gt;`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        list: [3,4,5],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    html: `&lt;div&gt;&#123; this.list &#125;&lt;/div&gt;`</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>像这样的节点整颗更新掉之后，html的信息其实已经替换成最新的，然后innerhtml=<strong>*</strong>。触发浏览器的视图刷新，这样就避免了一次次的调用api，也就变成了时间切片了，在一定时间内我这边自己做好处理再通知你。</p>\n<h5 id=\"现在的多端方案使用vue和react，借用的点是什么？\"><a href=\"#现在的多端方案使用vue和react，借用的点是什么？\" class=\"headerlink\" title=\"现在的多端方案使用vue和react，借用的点是什么？\"></a>现在的多端方案使用vue和react，借用的点是什么？</h5><p>其他端和浏览器是一致的，他们唯一借助的点是vue和react关于视图数据的管理和更新。唯一存在魔改的点在视图功能的对接口，即在浏览器端src和title可能对应的是node类中的一中功能，在安卓端这两个属性对应的实现点又是另一种方式。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=**** title=***/&gt;</span><br></pre></td></tr></table></figure></p>\n<p>所以慢慢的有一种感觉就是虽然都是react和vue但是其实已经不是之前在web端使用的了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjxadu7ww00005u5f9lqvutvs","category_id":"cjxadu7x900035u5fai2zntpm","_id":"cjxadu7xf00085u5f1smn1nf2"},{"post_id":"cjxadu7x600025u5foo1mcrch","category_id":"cjxadu7xe00055u5fh6rwbrwb","_id":"cjxadu7xg000a5u5f3uzbgkea"},{"post_id":"cjxadu7y8000b5u5fezz3e9zb","category_id":"cjxadu7yb000c5u5fk450qh4h","_id":"cjxadu7yc000f5u5fm2ribnex"}],"PostTag":[{"post_id":"cjxadu7ww00005u5f9lqvutvs","tag_id":"cjxadu7xc00045u5fo7k0xb34","_id":"cjxadu7xf00075u5f1bumfovj"},{"post_id":"cjxadu7x600025u5foo1mcrch","tag_id":"cjxadu7xe00065u5fzw2zhvs5","_id":"cjxadu7xg00095u5f1yhrfp5e"},{"post_id":"cjxadu7y8000b5u5fezz3e9zb","tag_id":"cjxadu7yb000d5u5fkciuldih","_id":"cjxadu7yb000e5u5f4xkjqual"}],"Tag":[{"name":"HTML","_id":"cjxadu7xc00045u5fo7k0xb34"},{"name":"reflect","_id":"cjxadu7xe00065u5fzw2zhvs5"},{"name":"vueconf","_id":"cjxadu7yb000d5u5fkciuldih"}]}}