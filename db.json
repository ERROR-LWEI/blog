{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/gallery/WechatIMG1.jpeg","path":"gallery/WechatIMG1.jpeg","modified":1,"renderable":0},{"_id":"source/gallery/deer.jpg","path":"gallery/deer.jpg","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/WechatIMG1.jpeg","path":"images/WechatIMG1.jpeg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/WechatIMG2.jpeg","path":"images/WechatIMG2.jpeg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"source/gallery/react-redux.jpeg","path":"gallery/react-redux.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"f69cd7e66c2687fa512fb521ad9416f8e1d8cf10","modified":1558106585290},{"_id":"themes/icarus/.DS_Store","hash":"f09a86bb4ce7d04901ec1bb4cb55bee99909840c","modified":1557557720057},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1557547364805},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1557547364805},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1557547364805},{"_id":"themes/icarus/_config.yml","hash":"9acd7f80a4edd2c96421fe2f34756d92cc49bf3b","modified":1557937621873},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1557547364824},{"_id":"source/gallery/.DS_Store","hash":"b19ae951849627256eb758edc7eec2a6064b92b0","modified":1558138129669},{"_id":"source/gallery/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1557548536040},{"_id":"source/gallery/deer.jpg","hash":"aeeb445722949281bda6df0b622dfd433e0ec41d","modified":1557556931950},{"_id":"source/_posts/a跳转操作.md","hash":"06296f50cd3870a9749e38d0d0a6138c3d8e2522","modified":1558617717683},{"_id":"source/_posts/typecript中的reflectApi元编程.md","hash":"7995ec364246314b3c63e82df0b9ab9b0327faad","modified":1559149146262},{"_id":"source/about/index.md","hash":"4d28ce53f65736db8cc90eb8b8cf1ff6c3a6dad8","modified":1557554989755},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1557547364805},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1557547364810},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1557547364810},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1557547364810},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1557547364811},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1557547364811},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1557547364811},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1557547364811},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1557547364811},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1557547364811},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1557547364812},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1557547364812},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1557547364812},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1557547364812},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1557547364813},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1557547364813},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1557547364816},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1557547364817},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1557547364817},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1557547364820},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1557547364822},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1557547364822},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1557547364824},{"_id":"themes/icarus/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1557548576080},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1557547364806},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1557547364806},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1557547364806},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1557547364806},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1557547364806},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1557547364807},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1557547364807},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/page.js","hash":"50dab1e4ecef55cd090625f91c5456b801e307f2","modified":1557547364807},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1557547364808},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1557547364808},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"4b84b08214cc21feaa4322357f0bec800bfca826","modified":1557547364808},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1557547364808},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1557547364808},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1557547364808},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1557547364808},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1557547364808},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1557547364809},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1557547364809},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1557547364809},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1557547364809},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1557547364809},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1557547364809},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1557547364809},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1557547364810},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1557547364810},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1557547364810},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1557547364813},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1557547364813},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1557547364813},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1557547364813},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1557547364814},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1557547364814},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1557547364814},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1557547364814},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1557554882360},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"0730e201e6d2a0d20dd1c8d9975c040f644e82ea","modified":1557558384097},{"_id":"themes/icarus/layout/common/head.ejs","hash":"12506ec5e7970eafdfde92c8d2ea44a40f1ba141","modified":1557547364815},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"403e9c8b5e981c4f4282fc31567f5220a34d5fd9","modified":1557547776934},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1557547364815},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1557547364815},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1557547364816},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1557547364816},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1557547364816},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1557547364816},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1557547364816},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1557547364817},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1557547364817},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1557547364818},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1557547364819},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1557547364819},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1557547364820},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1557547364820},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1557547364820},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1557547364821},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1557547364821},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1557547364821},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1557547364821},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1557547364821},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1557547364822},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1557547364822},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1557547364822},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"af05fb29b2b4e221bc50f61c1a85bb1f8c6cab89","modified":1557547364823},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1557547364823},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1557547364823},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1557547364823},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1557547364823},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1557547364824},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1557547364824},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1557547364824},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1557547364824},{"_id":"themes/icarus/source/css/style.styl","hash":"8df581f6d748c7268b93c9f35549e757cd999bbd","modified":1557569566894},{"_id":"themes/icarus/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557548614741},{"_id":"themes/icarus/source/images/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1557548536040},{"_id":"themes/icarus/source/images/WechatIMG2.jpeg","hash":"204db404043ab1c08e4fdf4d02dd1b46b3899f2b","modified":1557548541760},{"_id":"themes/icarus/source/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1557547364825},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1557547364825},{"_id":"themes/icarus/source/images/logo.svg","hash":"8d01b4dabbe934d3b632ac4343b157b99d444e54","modified":1557557826845},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1557547364826},{"_id":"themes/icarus/source/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1557547364826},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1557547364827},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1557547364827},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1557547364827},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1557547364827},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1557547364827},{"_id":"themes/icarus/source/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1557547364828},{"_id":"source/gallery/react-redux.jpeg","hash":"bd1b9d7b9613eb1c52394b2727dac57f2329e8f3","modified":1558106908072},{"_id":"public/content.json","hash":"fc90ea1d559926993fec281a7588e4f60b52e52a","modified":1560039135785},{"_id":"public/about/index.html","hash":"b32890e3fb0fb3c7788c1127da540bec5ddd0444","modified":1560039136206},{"_id":"public/2019/05/30/typecript中的reflectApi元编程/index.html","hash":"305320c4e67100183b44192867a9d4653f0721d5","modified":1560039136206},{"_id":"public/2019/05/23/a跳转操作/index.html","hash":"ce90644406e07dadf3b5d288034891a379ab8b4c","modified":1560039136206},{"_id":"public/archives/index.html","hash":"3260e0c7dc465fcffaab9876782897c3f8247fe8","modified":1560039136206},{"_id":"public/archives/2019/index.html","hash":"e93a41fb691e50add8de4fdc894e58a59c7bbe20","modified":1560039136206},{"_id":"public/archives/2019/05/index.html","hash":"a565baa1b47ee19777793bc439f3e0239f660fb8","modified":1560039136206},{"_id":"public/categories/HTML/index.html","hash":"15cd9d186759d27829317f467538494c6647499a","modified":1560039136206},{"_id":"public/categories/typescript/index.html","hash":"02255019139ad12451ff327eb5270ed23fb1321d","modified":1560039136206},{"_id":"public/index.html","hash":"e341e72c8409b06cd4fb8f34d8fa29e76f8c2249","modified":1560039136206},{"_id":"public/tags/HTML/index.html","hash":"985e11b1e57246c13d9afb405656333a25ff02ef","modified":1560039136206},{"_id":"public/tags/reflect/index.html","hash":"de966590166db67f491a15f21ba3a1914bdd7ebb","modified":1560039136207},{"_id":"public/categories/index.html","hash":"7bda9eb327d9306a80e82d8187f4594e95029f24","modified":1560039136207},{"_id":"public/tags/index.html","hash":"2bb8c00d244b83906d9165058b2f42941099a599","modified":1560039136207},{"_id":"public/gallery/deer.jpg","hash":"aeeb445722949281bda6df0b622dfd433e0ec41d","modified":1560039136209},{"_id":"public/images/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1560039136209},{"_id":"public/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1560039136209},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1560039136210},{"_id":"public/images/WechatIMG2.jpeg","hash":"204db404043ab1c08e4fdf4d02dd1b46b3899f2b","modified":1560039136210},{"_id":"public/images/logo.svg","hash":"8d01b4dabbe934d3b632ac4343b157b99d444e54","modified":1560039136210},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1560039136210},{"_id":"public/images/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1560039136210},{"_id":"public/gallery/WechatIMG1.jpeg","hash":"7673cc3dea3d10a05ac6a30f242e6e8253726a5a","modified":1560039136212},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1560039136330},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1560039136331},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1560039136331},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1560039136331},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1560039136331},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1560039136331},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1560039136331},{"_id":"public/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1560039136331},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1560039136331},{"_id":"public/css/style.css","hash":"6fd3065ac6a615be7809704b145bad6106847ff5","modified":1560039136333},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1560039136333},{"_id":"public/gallery/react-redux.jpeg","hash":"bd1b9d7b9613eb1c52394b2727dac57f2329e8f3","modified":1560039136336}],"Category":[{"name":"HTML","_id":"cjwo70sxm0002qb5f757zfimx"},{"name":"typescript","_id":"cjwo70sxo0004qb5fyu7pw85h"}],"Data":[],"Page":[{"title":"about","donate":false,"date":"2019-05-11T05:58:21.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndonate: false\ndate: 2019-05-11 13:58:21\n---\n","updated":"2019-05-11T06:09:49.755Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwo70sxy000aqb5f2gacocws","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"a跳转操作","date":"2019-05-23T11:54:28.000Z","_content":"## 超链接标签\nhtml中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。\n\n#### 跳转连接\n利用a标签进行路由跳转\n```\n<a href=\"www.zhihu.com\" title=\"知乎\">知乎</a>\n```\n#### 开启tab\n利用a标签跳转页面打开新页面\n```\n<a href=\"www.zhihu.com\" title=\"知乎\" target=\"_target\">知乎</a>\n```\n\n#### 锚点\n利用a标签跳转到页面的其他地方\n```\n<a href=\"#\">返回页面顶部</a>\n```\n\n#### 下载连接\n进行资源下载\n```\n<a href=\"*****\" download>文档</a>\n```\n\n#### 调起外部服务\n```\n### 移动端电话拨打\n<a href=\"tel:+134*******\">联系电话</a>\n### 邮件发送\n<a href=“mailto:error_lwei@163.com”>发送给谁</a>\n### 抄送\n<a href=\"mailto:error_lwei@163.com\" cc=\"lemonpaimc@163.com\">抄送</a>\n```\n","source":"_posts/a跳转操作.md","raw":"---\ntitle: a跳转操作\ndate: 2019-05-23 19:54:28\ntags: HTML\ncategory:\n    - \n        HTML\n---\n## 超链接标签\nhtml中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。\n\n#### 跳转连接\n利用a标签进行路由跳转\n```\n<a href=\"www.zhihu.com\" title=\"知乎\">知乎</a>\n```\n#### 开启tab\n利用a标签跳转页面打开新页面\n```\n<a href=\"www.zhihu.com\" title=\"知乎\" target=\"_target\">知乎</a>\n```\n\n#### 锚点\n利用a标签跳转到页面的其他地方\n```\n<a href=\"#\">返回页面顶部</a>\n```\n\n#### 下载连接\n进行资源下载\n```\n<a href=\"*****\" download>文档</a>\n```\n\n#### 调起外部服务\n```\n### 移动端电话拨打\n<a href=\"tel:+134*******\">联系电话</a>\n### 邮件发送\n<a href=“mailto:error_lwei@163.com”>发送给谁</a>\n### 抄送\n<a href=\"mailto:error_lwei@163.com\" cc=\"lemonpaimc@163.com\">抄送</a>\n```\n","slug":"a跳转操作","published":1,"updated":"2019-05-23T13:21:57.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwo70sxh0000qb5fmdgm7zed","content":"<h2 id=\"超链接标签\"><a href=\"#超链接标签\" class=\"headerlink\" title=\"超链接标签\"></a>超链接标签</h2><p>html中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。</p>\n<h4 id=\"跳转连接\"><a href=\"#跳转连接\" class=\"headerlink\" title=\"跳转连接\"></a>跳转连接</h4><p>利用a标签进行路由跳转<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"开启tab\"><a href=\"#开启tab\" class=\"headerlink\" title=\"开启tab\"></a>开启tab</h4><p>利用a标签跳转页面打开新页面<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot; target=&quot;_target&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>利用a标签跳转到页面的其他地方<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#&quot;&gt;返回页面顶部&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载连接\"><a href=\"#下载连接\" class=\"headerlink\" title=\"下载连接\"></a>下载连接</h4><p>进行资源下载<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;*****&quot; download&gt;文档&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"调起外部服务\"><a href=\"#调起外部服务\" class=\"headerlink\" title=\"调起外部服务\"></a>调起外部服务</h4><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动端电话拨打</span><br><span class=\"line\">&lt;a href=&quot;tel:+134*******&quot;&gt;联系电话&lt;/a&gt;</span><br><span class=\"line\">### 邮件发送</span><br><span class=\"line\">&lt;a href=“mailto:error_lwei@163.com”&gt;发送给谁&lt;/a&gt;</span><br><span class=\"line\">### 抄送</span><br><span class=\"line\">&lt;a href=&quot;mailto:error_lwei@163.com&quot; cc=&quot;lemonpaimc@163.com&quot;&gt;抄送&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"超链接标签\"><a href=\"#超链接标签\" class=\"headerlink\" title=\"超链接标签\"></a>超链接标签</h2><p>html中的a标签超链接可以实现，开启新tab，下载，跳转，锚点，调起外部功能。</p>\n<h4 id=\"跳转连接\"><a href=\"#跳转连接\" class=\"headerlink\" title=\"跳转连接\"></a>跳转连接</h4><p>利用a标签进行路由跳转<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"开启tab\"><a href=\"#开启tab\" class=\"headerlink\" title=\"开启tab\"></a>开启tab</h4><p>利用a标签跳转页面打开新页面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;www.zhihu.com&quot; title=&quot;知乎&quot; target=&quot;_target&quot;&gt;知乎&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"锚点\"><a href=\"#锚点\" class=\"headerlink\" title=\"锚点\"></a>锚点</h4><p>利用a标签跳转到页面的其他地方<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;#&quot;&gt;返回页面顶部&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"下载连接\"><a href=\"#下载连接\" class=\"headerlink\" title=\"下载连接\"></a>下载连接</h4><p>进行资源下载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;*****&quot; download&gt;文档&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"调起外部服务\"><a href=\"#调起外部服务\" class=\"headerlink\" title=\"调起外部服务\"></a>调起外部服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 移动端电话拨打</span><br><span class=\"line\">&lt;a href=&quot;tel:+134*******&quot;&gt;联系电话&lt;/a&gt;</span><br><span class=\"line\">### 邮件发送</span><br><span class=\"line\">&lt;a href=“mailto:error_lwei@163.com”&gt;发送给谁&lt;/a&gt;</span><br><span class=\"line\">### 抄送</span><br><span class=\"line\">&lt;a href=&quot;mailto:error_lwei@163.com&quot; cc=&quot;lemonpaimc@163.com&quot;&gt;抄送&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n"},{"title":"typecript中的reflectApi元编程","date":"2019-05-30T13:33:00.000Z","_content":"### 元编程\n>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。\n\n这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。\n\n```\nimport 'reflect-metadata';\n\n@Module({\n    import: [],\n    controller: [],\n    exports: [],\n})\nclass Test {\n    constructor(props) {}\n    @Reflect.metadata('hello', 'word')\n    getService() {}\n}\n```\n利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。\n#### nestjs使用注解对元子进行操作的特点\n##### 类型注解\n@Module\n这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。\n```\n例：\n/user/info/add\n/user/msg/detail\n这样一个资源路径转换成module\n        user\n    info    msg\nadd             detail\n应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。\n```\n每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。\n```\nimport起到连接module的作用建立上下级关系同时具备service的传导操作\n    import\nuser  =>  info\nuser  =>  msg\n    service\nuser  <=  info\nuser  <=  msg\n这类似与在父进程中兄弟线程的共享内存\n```\n##### 依赖注入\n直观点按nest的操作来看就是\n```\n@module({\n    import: [],\n    controller: [UserController],\n    provider: [UserService]\n})\nclass User {}\n\n// 内部其实大概是这样的\nnew UserController(new UserService)\n\nclass UserService {\n    constructor(userservice: UserService) {}\n}\n\n// 注入的过程在工厂函数构建应用时完成的\n```\n##### 操作\n应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程\n```\ndb <= service <= controller\n```\n\n#### 模型转到前端\n把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。\n##### redux应用的中心\nredux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。\n```\n对应关系\ndb <= service <= controller\nstore <= action <= view\n```\n\n##### store\n```\n@Store('user')\nclass User {\n    constructor() {}\n\n    @type('ADD_USER')\n    function add(state, action) {\n        ......\n    }\n\n    @type('UPDATA_USER')\n    function updata(state, action) {\n        ......\n    }\n}\n```\n##### action\n```\n@Action()\nclass UserAction {\n    constructor(user: User) {}\n    \n    @post('/api/user', 'json')\n    function add(params) {\n        return {\n            type: user.ADD_USER\n            params: {\n                ...params\n            }\n        }\n    }\n}\n```\n##### view\n```\n@View\nclass User extends React.Component {\n    constructor() {}\n}\n\nfunction View(state, action) {\n    return function(Target) {\n        return connect(state, action)(Target)\n    }\n}\n```\n#### import\nnest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。\n\n最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。","source":"_posts/typecript中的reflectApi元编程.md","raw":"---\ntitle: typecript中的reflectApi元编程\ndate: 2019-05-30 21:33:00\ntags: reflect\ncategory:\n    -\n        typescript\n---\n### 元编程\n>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。\n\n这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。\n\n```\nimport 'reflect-metadata';\n\n@Module({\n    import: [],\n    controller: [],\n    exports: [],\n})\nclass Test {\n    constructor(props) {}\n    @Reflect.metadata('hello', 'word')\n    getService() {}\n}\n```\n利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。\n#### nestjs使用注解对元子进行操作的特点\n##### 类型注解\n@Module\n这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。\n```\n例：\n/user/info/add\n/user/msg/detail\n这样一个资源路径转换成module\n        user\n    info    msg\nadd             detail\n应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。\n```\n每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。\n```\nimport起到连接module的作用建立上下级关系同时具备service的传导操作\n    import\nuser  =>  info\nuser  =>  msg\n    service\nuser  <=  info\nuser  <=  msg\n这类似与在父进程中兄弟线程的共享内存\n```\n##### 依赖注入\n直观点按nest的操作来看就是\n```\n@module({\n    import: [],\n    controller: [UserController],\n    provider: [UserService]\n})\nclass User {}\n\n// 内部其实大概是这样的\nnew UserController(new UserService)\n\nclass UserService {\n    constructor(userservice: UserService) {}\n}\n\n// 注入的过程在工厂函数构建应用时完成的\n```\n##### 操作\n应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程\n```\ndb <= service <= controller\n```\n\n#### 模型转到前端\n把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。\n##### redux应用的中心\nredux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。\n```\n对应关系\ndb <= service <= controller\nstore <= action <= view\n```\n\n##### store\n```\n@Store('user')\nclass User {\n    constructor() {}\n\n    @type('ADD_USER')\n    function add(state, action) {\n        ......\n    }\n\n    @type('UPDATA_USER')\n    function updata(state, action) {\n        ......\n    }\n}\n```\n##### action\n```\n@Action()\nclass UserAction {\n    constructor(user: User) {}\n    \n    @post('/api/user', 'json')\n    function add(params) {\n        return {\n            type: user.ADD_USER\n            params: {\n                ...params\n            }\n        }\n    }\n}\n```\n##### view\n```\n@View\nclass User extends React.Component {\n    constructor() {}\n}\n\nfunction View(state, action) {\n    return function(Target) {\n        return connect(state, action)(Target)\n    }\n}\n```\n#### import\nnest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。\n\n最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。","slug":"typecript中的reflectApi元编程","published":1,"updated":"2019-05-29T16:59:06.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwo70sxl0001qb5ffvn8fala","content":"<h3 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h3><blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。</p>\n</blockquote>\n<p>这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。</p>\n<figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;reflect-metadata&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [],</span><br><span class=\"line\">    exports: [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    constructor(props) &#123;&#125;</span><br><span class=\"line\">    @Reflect.metadata(&apos;hello&apos;, &apos;word&apos;)</span><br><span class=\"line\">    getService() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。</p>\n<h4 id=\"nestjs使用注解对元子进行操作的特点\"><a href=\"#nestjs使用注解对元子进行操作的特点\" class=\"headerlink\" title=\"nestjs使用注解对元子进行操作的特点\"></a>nestjs使用注解对元子进行操作的特点</h4><h5 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h5><p>@Module<br>这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">/user/info/add</span><br><span class=\"line\">/user/msg/detail</span><br><span class=\"line\">这样一个资源路径转换成module</span><br><span class=\"line\">        user</span><br><span class=\"line\">    info    msg</span><br><span class=\"line\">add             detail</span><br><span class=\"line\">应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。</span><br></pre></td></tr></table></figure></p>\n<p>每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import起到连接module的作用建立上下级关系同时具备service的传导操作</span><br><span class=\"line\">    import</span><br><span class=\"line\">user  =&gt;  info</span><br><span class=\"line\">user  =&gt;  msg</span><br><span class=\"line\">    service</span><br><span class=\"line\">user  &lt;=  info</span><br><span class=\"line\">user  &lt;=  msg</span><br><span class=\"line\">这类似与在父进程中兄弟线程的共享内存</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h5><p>直观点按nest的操作来看就是<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [UserController],</span><br><span class=\"line\">    provider: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部其实大概是这样的</span><br><span class=\"line\">new UserController(new UserService)</span><br><span class=\"line\"></span><br><span class=\"line\">class UserService &#123;</span><br><span class=\"line\">    constructor(userservice: UserService) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注入的过程在工厂函数构建应用时完成的</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &lt;= service &lt;= controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模型转到前端\"><a href=\"#模型转到前端\" class=\"headerlink\" title=\"模型转到前端\"></a>模型转到前端</h4><p>把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。</p>\n<h5 id=\"redux应用的中心\"><a href=\"#redux应用的中心\" class=\"headerlink\" title=\"redux应用的中心\"></a>redux应用的中心</h5><p>redux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。<br><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应关系</span><br><span class=\"line\">db &lt;= service &lt;= controller</span><br><span class=\"line\">store &lt;= action &lt;= view</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Store(&apos;user&apos;)</span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;ADD_USER&apos;)</span><br><span class=\"line\">    function add(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;UPDATA_USER&apos;)</span><br><span class=\"line\">    function updata(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Action()</span><br><span class=\"line\">class UserAction &#123;</span><br><span class=\"line\">    constructor(user: User) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @post(&apos;/api/user&apos;, &apos;json&apos;)</span><br><span class=\"line\">    function add(params) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: user.ADD_USER</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                ...params</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h5><figure class=\"highlight plain hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@View</span><br><span class=\"line\">class User extends React.Component &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function View(state, action) &#123;</span><br><span class=\"line\">    return function(Target) &#123;</span><br><span class=\"line\">        return connect(state, action)(Target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><p>nest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。</p>\n<p>最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"元编程\"><a href=\"#元编程\" class=\"headerlink\" title=\"元编程\"></a>元编程</h3><blockquote>\n<p>元编程（Metaprogramming）是指某类计算机程序的编写，这类计算机程序编写或者操纵其他程序（或者自身）作为它们的数据，或者在运行时完成部分本应在编译时完成的工作。很多情况下与手工编写全部代码相比工作效率更高。编写元程序的语言称之为元语言，被操作的语言称之为目标语言。一门语言同时也是自身的元语言的能力称之为反射。</p>\n</blockquote>\n<p>这个是一个很抽象的概念，作为非计算机类专业的好像也不太好班门弄斧去解释这个概念。只能从字面去说一下自己的认识。“元编程”字面就是对原子进行编程，在具体使用中这个原子可以细化到一个变量也可以扩展到一个函数功能和一个对象。编程的概念其实描述的是一个过程，从输入到产出的一个整体的过程，开发者通过代码参与这个过程控制过程的流向。元编程的话，假设在一个过程中有一个a功能对象是专门用于处理一个订单分发策略的，那么这其中一定会有根据不同的标注信息做不同的动作，虽然同一个功能对象但是能根据不同的信息产生不同的效果（可能这就是控制反转，在不修改代码内部的情况下通过外部标注信息的修改达到修改结果的目的）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &apos;reflect-metadata&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [],</span><br><span class=\"line\">    exports: [],</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class Test &#123;</span><br><span class=\"line\">    constructor(props) &#123;&#125;</span><br><span class=\"line\">    @Reflect.metadata(&apos;hello&apos;, &apos;word&apos;)</span><br><span class=\"line\">    getService() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用reflect对类进行元数据的添加，在class外和class内使用装饰器去处理target目标有所不同。module部分修饰的目标是类本身，metadata部分修饰的是类的原型链对象prototype上的属性。前者如果在程序启动后获取的一般是未实例化下的类型注解，后者能获取到的注解信息是实例化后的对象的。</p>\n<h4 id=\"nestjs使用注解对元子进行操作的特点\"><a href=\"#nestjs使用注解对元子进行操作的特点\" class=\"headerlink\" title=\"nestjs使用注解对元子进行操作的特点\"></a>nestjs使用注解对元子进行操作的特点</h4><h5 id=\"类型注解\"><a href=\"#类型注解\" class=\"headerlink\" title=\"类型注解\"></a>类型注解</h5><p>@Module<br>这个是注解一个模块类型的，在nest去编写node服务时使用module表明这是一个模块类型的类，同时在内部做到了从path资源路径到module的关联。内部做到将module名称转换到path的过程，同时module的概念包含了service与import信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例：</span><br><span class=\"line\">/user/info/add</span><br><span class=\"line\">/user/msg/detail</span><br><span class=\"line\">这样一个资源路径转换成module</span><br><span class=\"line\">        user</span><br><span class=\"line\">    info    msg</span><br><span class=\"line\">add             detail</span><br><span class=\"line\">应用的全局其实就维护着这样一个信息，信息的获取与组织就通过注解去完成了。</span><br></pre></td></tr></table></figure></p>\n<p>每一个类型注解对应一套处理规则，module类型用于组织资源的关联信息Inject类型负责组织在module类传递的服务依赖信息。说回module的另一个注解信息exports，exports的功能用于导出service服务。无导出情况下service操作只在module内部可见，有导出操作后module的service功能在父子兄弟之间传递共享，所要应对的情况是：在detail内可能需要调用add的数据操作功能，因为service操作最终还是db操作的实体化。所以需要具备导出操作。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import起到连接module的作用建立上下级关系同时具备service的传导操作</span><br><span class=\"line\">    import</span><br><span class=\"line\">user  =&gt;  info</span><br><span class=\"line\">user  =&gt;  msg</span><br><span class=\"line\">    service</span><br><span class=\"line\">user  &lt;=  info</span><br><span class=\"line\">user  &lt;=  msg</span><br><span class=\"line\">这类似与在父进程中兄弟线程的共享内存</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"依赖注入\"><a href=\"#依赖注入\" class=\"headerlink\" title=\"依赖注入\"></a>依赖注入</h5><p>直观点按nest的操作来看就是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@module(&#123;</span><br><span class=\"line\">    import: [],</span><br><span class=\"line\">    controller: [UserController],</span><br><span class=\"line\">    provider: [UserService]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">class User &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部其实大概是这样的</span><br><span class=\"line\">new UserController(new UserService)</span><br><span class=\"line\"></span><br><span class=\"line\">class UserService &#123;</span><br><span class=\"line\">    constructor(userservice: UserService) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 注入的过程在工厂函数构建应用时完成的</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h5><p>应用组织完成后，从前端调用接口到最后的数据操作大概要走下面的过程<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db &lt;= service &lt;= controller</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"模型转到前端\"><a href=\"#模型转到前端\" class=\"headerlink\" title=\"模型转到前端\"></a>模型转到前端</h4><p>把这套方式转到前端处理的化，视图层先不管那只是很外在的东西不管界面长得千奇百怪最后还是要进行操作执行action去触发请求动作。所以重要的是收集存在的action动作信息更新创建等如果用saga的task概念去管理异步的化就可以将一个动作集合整合到一个task任务中去处理减少在视图层的组合请求动作（如前后一个动作依赖前一个动作的结果）这样能减少视图层逻辑的复杂度，增加应用的移植性，另外在saga中有管道的概念相同的动作能做到顺序执行并能暂停和重启回退这对于频繁的操作能起到很好的抗压作用。所以重要点其实不在视图层而是在redux应用的整个action动作的流程。</p>\n<h5 id=\"redux应用的中心\"><a href=\"#redux应用的中心\" class=\"headerlink\" title=\"redux应用的中心\"></a>redux应用的中心</h5><p>redux应用的整体使用状态去控制，一个action触发的是一个操作状态ADD_DETAIL之类的。需要组织的是应用的状态管理。那么基础的元数据就是应用的状态一个函数是用来处理何种状态的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对应关系</span><br><span class=\"line\">db &lt;= service &lt;= controller</span><br><span class=\"line\">store &lt;= action &lt;= view</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Store(&apos;user&apos;)</span><br><span class=\"line\">class User &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;ADD_USER&apos;)</span><br><span class=\"line\">    function add(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @type(&apos;UPDATA_USER&apos;)</span><br><span class=\"line\">    function updata(state, action) &#123;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Action()</span><br><span class=\"line\">class UserAction &#123;</span><br><span class=\"line\">    constructor(user: User) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    @post(&apos;/api/user&apos;, &apos;json&apos;)</span><br><span class=\"line\">    function add(params) &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            type: user.ADD_USER</span><br><span class=\"line\">            params: &#123;</span><br><span class=\"line\">                ...params</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"view\"><a href=\"#view\" class=\"headerlink\" title=\"view\"></a>view</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@View</span><br><span class=\"line\">class User extends React.Component &#123;</span><br><span class=\"line\">    constructor() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function View(state, action) &#123;</span><br><span class=\"line\">    return function(Target) &#123;</span><br><span class=\"line\">        return connect(state, action)(Target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h4><p>nest中import完成了module中资源路径前前后关系，转换到前端可以用import去关系整个路由的前后关系。这样也省去前端去管理路由的额外的开发时间。</p>\n<p>最主要的还是借鉴nest的方式想将应用的路由，api，状态管理的额外开发量合并到开发具体功能中省去这部分的时长。这部分的信息大多散落在各个文件中，不利于管理。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwo70sxh0000qb5fmdgm7zed","category_id":"cjwo70sxm0002qb5f757zfimx","_id":"cjwo70sxp0007qb5f1zslm4q6"},{"post_id":"cjwo70sxl0001qb5ffvn8fala","category_id":"cjwo70sxo0004qb5fyu7pw85h","_id":"cjwo70sxp0009qb5f7v8a4mrx"}],"PostTag":[{"post_id":"cjwo70sxh0000qb5fmdgm7zed","tag_id":"cjwo70sxo0003qb5fn618xos3","_id":"cjwo70sxp0006qb5frq264d7b"},{"post_id":"cjwo70sxl0001qb5ffvn8fala","tag_id":"cjwo70sxo0005qb5fi89eq5ad","_id":"cjwo70sxp0008qb5f6bpprn18"}],"Tag":[{"name":"HTML","_id":"cjwo70sxo0003qb5fn618xos3"},{"name":"reflect","_id":"cjwo70sxo0005qb5fi89eq5ad"}]}}